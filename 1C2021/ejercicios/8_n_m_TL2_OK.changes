----STARTUP---- (14 June 2021 15:33:28) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 15:43:07'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 15:43:09'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 15:43:11'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 15:43:11'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 15:45:37' prior: 50880990!
test03

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Array with: 'aBook'.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today next).
	aCart := Cart acceptingItemsOf: aCatalogue.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 15:45:39'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 15:50:38' prior: 50880957!
checkout: aCart payingWith: aCreditCard

	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	^ salesLog add: aCart totalPrice! !
!Cart methodsFor: 'initialization' stamp: 'ijgt 6/14/2021 15:51:12' prior: 50880468!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !
!Cart methodsFor: 'assertions' stamp: 'ijgt 6/14/2021 15:51:33' prior: 50880455!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'queries' stamp: 'ijgt 6/14/2021 15:53:56' prior: 50880474!
occurrencesOf: anItem

	^items at: anItem ifAbsent: [0]! !
!Cart methodsFor: 'testing' stamp: 'ijgt 6/14/2021 15:54:17' prior: 50880478!
includes: anItem

	^items includesKey: anItem ! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:58:07' prior: 50880486!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem put: (items occurrencesOf: anItem).! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:58:16' prior: 50881079!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem put: (items occurrencesOf: anItem + aQuantity ).! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:58:39' prior: 50881087!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem put: (items occurrencesOf: anItem) + aQuantity.! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:59:07' prior: 50880494!
add: anItem

	^ self at: anItem put: 1! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:59:42' prior: 50881103!
add: anItem

	^ self at: anItem put: (1 + self occurrencesOf: anItem)! !
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 15:59:53' prior: 50881095!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items at: anItem put: (self occurrencesOf: anItem) + aQuantity.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/14/2021 16:00:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:00:12'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/14/2021 16:00:12'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/14/2021 16:00:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/14/2021 16:00:12'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/14/2021 16:00:12'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/14/2021 16:00:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/14/2021 16:00:12'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:00:23'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/14/2021 16:01:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:01:33'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/14/2021 16:01:33'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/14/2021 16:01:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/14/2021 16:01:33'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/14/2021 16:01:33'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/14/2021 16:01:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/14/2021 16:01:33'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:01:36'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'ijgt 6/14/2021 16:03:56' prior: 50881107!
add: anItem

	^ self add: 1 of: anItem! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:03:58'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/14/2021 16:04:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:04:05'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/14/2021 16:04:05'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/14/2021 16:04:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/14/2021 16:04:05'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/14/2021 16:04:05'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/14/2021 16:04:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/14/2021 16:04:05'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:04:08'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'ijgt 6/14/2021 16:06:21' prior: 50881063!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:06:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/14/2021 16:06:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/14/2021 16:06:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/14/2021 16:06:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/14/2021 16:06:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/14/2021 16:07:00'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 16:07:09'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:07:11'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:07:12'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:07:12'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 16:15:36' prior: 50880909!
test02

	|aCatalogue aCashier aCreditCard aCart aSalesLog|
	aCatalogue := Dictionary new; at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today previous).
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:15:38'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:16:17'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 16:17:18' prior: 50881273!
test02

	|aCatalogue aCashier aCreditCard aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today previous).
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:17:20'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 16:17:20'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:17:20'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:17:20'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:17:20'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:17:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 16:17:54' prior: 50880844!
test01

	|aCatalogue aCashier aCreditCard aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today next).
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 16:18:07' prior: 50881024!
test03

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today next).
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:18:20'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:18:20'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 16:19:09' prior: 50881045!
checkout: aCart payingWith: aCreditCard

	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	^ salesLog add: (self totalPriceOf: aCart)! !
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 16:21:41'!
totalPriceOf: aCart

	aCart items! !
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 16:23:42' prior: 50881384!
checkout: aCart payingWith: aCreditCard

	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	^ salesLog add: (aCart calculatePriceWithCashier: self)! !
!Cart methodsFor: 'calculatePrice' stamp: 'ijgt 6/14/2021 16:24:33'!
calculatePriceWithCashier: aCashier

	aCashier totalPriceOf: items! !
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 16:27:01' prior: 50881396!
totalPriceOf: items

	items sum: [:item | catalogue at: item * (items at: item)]! !
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 16:27:45' prior: 50881417!
totalPriceOf: cartItems

	^ cartItems sum: [:item | catalogue at: item * (cartItems at: item)]! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:27:51'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:27:51'!
ERROR!
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 16:28:52' prior: 50881423!
totalPriceOf: cartItems

	^ cartItems keys sum: [:item | catalogue at: item * (cartItems at: item)]! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:28:57'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:28:57'!
ERROR!
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 16:29:23' prior: 50881434!
totalPriceOf: cartItems

	^ cartItems keys sum: [:item | (catalogue at: item) * (cartItems at: item)]! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:29:28'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 16:29:30'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 16:29:30'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 16:29:30'!
PASSED!

----QUIT----(14 June 2021 16:50:13) CuisUniversity-4532.image priorSource: 17579453!

----STARTUP---- (14 June 2021 18:36:56) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'ijgt 6/14/2021 18:38:38'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Sale
	instanceVariableNames: 'price'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'ijgt 6/14/2021 18:38:54'!
Object subclass: #Sale
	instanceVariableNames: 'price'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'no messages' stamp: 'ijgt 6/14/2021 18:39:17'!
price
	
	^ price! !
!Sale class methodsFor: 'no messages' stamp: 'ijgt 6/14/2021 18:40:24'!
with: aPrice

	^ self new initializeWith: aPrice! !
!Sale methodsFor: 'as yet unclassified' stamp: 'ijgt 6/14/2021 18:41:07'!
initializeWith: aPrice

	price := aPrice ! !
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 18:44:29' prior: 50881445!
totalPriceOf: cartItems

	^ Sale with: (cartItems keys sum: [:item | (catalogue at: item) * (cartItems at: item)])! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 18:44:35'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 18:44:38'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 18:44:39'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 18:48:21'!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today next) andFunds: 500.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !

Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate funds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ijgt 6/14/2021 18:48:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate funds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ijgt 6/14/2021 18:49:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

[:funds | 500] d!

Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ijgt 6/14/2021 18:57:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 18:58:55' prior: 50881511!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := CreditCard withExpirationDate: (Date today next).
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!Cashier methodsFor: 'nil' stamp: 'ijgt 6/14/2021 19:01:52'!
addCreditCardSimulator: aMerchantProcessorSimulator

	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'ijgt 6/14/2021 19:02:47'!
Object subclass: #Cashier
	instanceVariableNames: 'catalogue date salesLog merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'ijgt 6/14/2021 19:02:43' prior: 50881585!
addCreditCardSimulator: aMerchantProcessorSimulator

	merchantProcessor := aMerchantProcessorSimulator ! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:04:16' prior: 50881566!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 200].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:04:24' prior: 50881604!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: aCreditCard.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:04:42' prior: 50881623!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:06:38' prior: 50881641!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:07:36' prior: 50881655!
test04

	|aCatalogue aCashier aCreditCard aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:08:19'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'ijgt 6/14/2021 19:08:44'!
canNotCheckoutCreditCardWithInsufficientFundsErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'ijgt 6/14/2021 19:09:26' prior: 50881703!
canNotCheckoutCreditCardWithInsufficientFundsErrorDescription
	
	^ 'Credit card with insufficient funds.'! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:09:29'!
FAILURE!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:11:44'!
funds: aCreditCard

	^ aCreditCard value! !
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 19:22:03' prior: 50881400!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	totalPrice := aCart calculatePriceWithCashier: self.
	(merchantProcessor canDebit: totalPrice with: aCreditCard) ifFalse: [
		self error: self class canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	salesLog add: totalPrice.
	! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:23:37'!
canDebit: aPrice with: aCreditCard

	^ aCreditCard value <= aPrice ! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:23:57' prior: 50881741!
canDebit: aPrice with: aCreditCard

	^ aCreditCard value >= aPrice! !

!methodRemoval: CashierTest #funds: stamp: 'ijgt 6/14/2021 19:24:02'!
funds: aCreditCard

	^ aCreditCard value!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:24:20'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:24:20'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 19:25:39' prior: 50881722!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	"(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	"
	totalPrice := aCart calculatePriceWithCashier: self.
	(merchantProcessor canDebit: totalPrice with: aCreditCard) ifFalse: [
		self error: self class canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	salesLog add: totalPrice.
	! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:25:47'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:25:47'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:26:30'!
FAILURE!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:26:56' prior: 50881747!
canDebit: aPrice with: aCreditCard

	^ (aCreditCard value) >= aPrice! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:27:01'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:27:01'!
FAILURE!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:30:05' prior: 50881787!
canDebit: aPrice with: aCreditCard

	^ (aCreditCard value : 2) >= aPrice! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:30:12'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:30:12'!
FAILURE!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:30:35' prior: 50881797!
canDebit: aPrice with: aCreditCard

	^ (aCreditCard value:2) >= aPrice! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 19:30:46' prior: 50881807!
canDebit: aPrice with: aCreditCard

	^ (aCreditCard value: 2) >= aPrice! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:30:55'!
FAILURE!
!Cashier methodsFor: 'totalPrice' stamp: 'ijgt 6/14/2021 19:32:52' prior: 50881498!
totalPriceOf: cartItems

	^ cartItems keys sum: [:item | (catalogue at: item) * (cartItems at: item)]! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:33:18'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:33:18'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 19:36:50' prior: 50881760!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	"(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	"
	totalPrice := aCart calculatePriceWithCashier: self.
	(merchantProcessor canDebit: totalPrice with: aCreditCard) ifFalse: [
		self error: self class canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	salesLog add: (Sale with: totalPrice).
	! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:37:27'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:37:27'!
FAILURE!
!Cart methodsFor: 'calculatePrice' stamp: 'ijgt 6/14/2021 19:40:15' prior: 50881412!
calculatePriceWithCashier: aCashier

	^ aCashier totalPriceOf: items! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:40:26'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:40:27'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:45:32'!
test05

	|aCatalogue aCashier aCreditCard aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCreditCard := [:funds | 20].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/14/2021 19:48:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'ijgt 6/14/2021 19:50:19' overrides: 16927572!
setUp

	creditCardSimulator := CreditCard withExpirationDate: (Date today next)! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:51:53' prior: 50881865!
test05

	|aCatalogue aCashier aCreditCard aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	creditCardSimulator := [:funds | 20].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: aCreditCard.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:52:19' prior: 50881907!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	creditCardSimulator := [:funds | 20].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:52:56' prior: 50881677!
test04

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	creditCardSimulator := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/14/2021 19:53:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/14/2021 19:55:06' prior: 50881360!
test03

	|aCatalogue aCashier aCart aSalesLog aSale|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	
	aSale := aCashier checkout: aCart payingWith: creditCardSimulator.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 19:55:06'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/14/2021 19:56:53'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 19:56:57'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 19:56:57'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/14/2021 19:57:11' prior: 50881832!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	totalPrice := aCart calculatePriceWithCashier: self.
	(merchantProcessor canDebit: totalPrice with: aCreditCard) ifFalse: [
		self error: self class canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	salesLog add: (Sale with: totalPrice).
	! !

!testRun: #CashierTest #test02 stamp: 'ijgt 6/14/2021 19:57:19'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 19:57:30'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 19:57:30'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/14/2021 19:57:39'!
ERROR!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/14/2021 20:02:57' prior: 50881813!
canDebit: aPrice with: aCreditCard

	^ (creditCardSimulator value: 2) >= aPrice! !

----QUIT----(14 June 2021 20:44:05) CuisUniversity-4532.image priorSource: 17593904!

----STARTUP---- (15 June 2021 15:44:24) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:47:00'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 15:47:03'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 15:47:05'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 15:47:05'!
ERROR!

TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/15/2021 15:48:50'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'ijgt 6/15/2021 15:49:16' prior: 50881901 overrides: 16927572!
setUp

	creditCardSimulator := CreditCard withExpirationDate: (Date today next).
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous)! !

TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/15/2021 15:50:18'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'creditCardSimulator validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'ijgt 6/15/2021 15:50:54' prior: 50882071 overrides: 16927572!
setUp

	validCreditCard := CreditCard withExpirationDate: (Date today next).
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous)! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 15:51:22' prior: 50881301!
test02

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 15:51:24'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:51:24'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 15:51:24'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 15:51:24'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 15:51:24'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 15:51:24'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 15:51:42' prior: 50881338!
test01

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:51:55'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:51:55'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 15:51:55'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 15:51:55'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 15:51:55'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 15:51:55'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 15:52:14' prior: 50882137!
test01

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:52:17'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 15:52:17'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 15:52:17'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 15:52:17'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 15:52:17'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 15:52:17'!
FAILURE!

TestCase subclass: #CashierTest
	instanceVariableNames: 'debitSimulator validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/15/2021 16:07:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'debitSimulator validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:07:48'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:07:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:09:28' prior: 50881981!
test03

	|aCatalogue aCashier aCart aSalesLog aSale funds|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	funds := 10.
	debitSimulator := [:anAmount | funds := funds - anAmount].
	
	aSale := aCashier checkout: aCart payingWith: debitSimulator.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/15/2021 16:09:48' prior: 50882037!
canDebit: aPrice with: aCreditCard

	^ (debitSimulator value: 2) >= aPrice! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/15/2021 16:10:42' prior: 50882243!
canDebit: aPrice with: aCreditCard

	^ (debitSimulator value: 0) >= aPrice! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:20:13' prior: 50882223!
test03

	|aCatalogue aCashier aCart aSalesLog aSale funds creditCard|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	funds := 10.
	debitSimulator := [:anAmount :aCreditCard | funds := funds - anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: debitSimulator.
	self assert: creditCard equals: validCreditCard.
	self assert: funds equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:25:35' prior: 50882255!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: debitSimulator.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/15/2021 16:26:07'!
debit: aPrice with: aCreditCard

	^ (debitSimulator value: 0) >= aPrice! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:26:07' prior: 50882008!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	totalPrice := aCart calculatePriceWithCashier: self.
	(merchantProcessor debit: totalPrice with: aCreditCard) ifFalse: [
		self error: self class canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	salesLog add: (Sale with: totalPrice).
	! !

!methodRemoval: CashierTest #canDebit:with: stamp: 'ijgt 6/15/2021 16:26:07'!
canDebit: aPrice with: aCreditCard

	^ (debitSimulator value: 0) >= aPrice!
!CashierTest methodsFor: 'mp simulator' stamp: 'ijgt 6/15/2021 16:26:29' prior: 50882302!
debit: aPrice with: aCreditCard

	^ debitSimulator value: aPrice value: aCreditCard! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:26:47'!
ERROR!
!Cashier class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:32:03'!
with: aCatalogue onDate: aDate andSalesLog: aSalesLog m1: aMerchantProcessor 

	^ self new initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:03' prior: 50882171!
test01

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog m1: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:03' prior: 50882279!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog m1: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: debitSimulator.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:03' prior: 50881931!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog m1: self.
	creditCardSimulator := [:funds | 20].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:04' prior: 50881955!
test04

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog m1: self.
	creditCardSimulator := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:04' prior: 50882102!
test02

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog m1: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: Cashier class #with:onDate:andSalesLog: stamp: 'ijgt 6/15/2021 16:32:04'!
with: aCatalogue onDate: aDate andSalesLog: aSalesLog

	^ self new initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog!
!Cashier class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:32:32'!
with: aCatalogue onDate: aDate andSalesLog: aSalesLog andMerchantProcessor: aMerchantProcessor 

	^ self new initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:32' prior: 50882350!
test01

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:32' prior: 50882418!
test04

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	creditCardSimulator := [:funds | 0].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:32' prior: 50882394!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	creditCardSimulator := [:funds | 20].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: creditCardSimulator.
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:32' prior: 50882370!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: debitSimulator.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:32:32' prior: 50882442!
test02

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: Cashier class #with:onDate:andSalesLog:m1: stamp: 'ijgt 6/15/2021 16:32:32'!
with: aCatalogue onDate: aDate andSalesLog: aSalesLog m1: aMerchantProcessor 

	^ self new initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog!
!Cashier methodsFor: 'initialize' stamp: 'ijgt 6/15/2021 16:33:40'!
initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog andMerchantProcessor: aMerchantProcessor 

	catalogue := aCatalogue.
	date := aDate.
	salesLog := aSalesLog.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:33:40' prior: 50882470!
with: aCatalogue onDate: aDate andSalesLog: aSalesLog andMerchantProcessor: aMerchantProcessor 

	^ self new initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog andMerchantProcessor: aMerchantProcessor! !

!methodRemoval: Cashier #initializeWithCatalogue:onDate:andSalesLog: stamp: 'ijgt 6/15/2021 16:33:40'!
initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog

	catalogue := aCatalogue.
	date := aDate.
	salesLog := aSalesLog.!
!Cashier methodsFor: 'initialize' stamp: 'ijgt 6/15/2021 16:33:55' prior: 50882604!
initializeWithCatalogue: aCatalogue onDate: aDate andSalesLog: aSalesLog andMerchantProcessor: aMerchantProcessor 
	catalogue := aCatalogue.
	date := aDate.
	salesLog := aSalesLog.
	merchantProcessor := aMerchantProcessor.! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:34:45' prior: 50882550!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: validCreditCard.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.! !

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:35:08'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:35:09'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:35:10'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:35:10'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/15/2021 16:35:50' prior: 50882308!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	totalPrice := aCart calculatePriceWithCashier: self.
	merchantProcessor debit: totalPrice with: aCreditCard.
	salesLog add: (Sale with: totalPrice).
	! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:35:55'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:35:55'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/15/2021 16:36:32' prior: 50882675!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	(aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
	
	totalPrice := aCart calculatePriceWithCashier: self.
	merchantProcessor debit: totalPrice with: aCreditCard.
	^ salesLog add: (Sale with: totalPrice).
	! !

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:36:36'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:36:37'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:36:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:36:40'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:39:35' prior: 50882500!
test04

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:39:39'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:39:39'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:39:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:39:39'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:39:39'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:39:39'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:39:39'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:39:57'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:40:00'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:40:01'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:41:31' prior: 50882525!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | self error: Cashier canNotDebitWithStolenCreditCardErrorDescription].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:41:42' prior: 50882773!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | self error: Cashier canNotDebitWithStolenCreditCardErrorDescription].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:41:47'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:41:47'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:41:47'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:41:47'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:41:47'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:41:47'!
ERROR!
!Cashier class methodsFor: 'error handling' stamp: 'ijgt 6/15/2021 16:42:02'!
canNotDebitWithStolenCreditCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error handling' stamp: 'ijgt 6/15/2021 16:42:31' prior: 50882840!
canNotDebitWithStolenCreditCardErrorDescription
	
	^ 'Can not debit with stolen credit card.'! !

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:42:34'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:44:19'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:44:24'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:44:25'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:44:26'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:44:31'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:44:33'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:44:33'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:44:33'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:44:33'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:44:33'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:47:20' prior: 50882641!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: validCreditCard.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.
	self assert: aSale price equals: 5! !

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 16:47:21'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:48:00'!
test06

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | self error: Cashier canNotDebitWithStolenCreditCardErrorDescription].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 16:53:32' prior: 50882928!
test06

	|aCatalogue aCashier aCart aSalesLog invalidCreditCard|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	invalidCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Ignacio Javier Gonz�lez Tafler Bolainas' andNumber: 111.
	
	self should: [
		aCashier checkout: aCart payingWith: invalidCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:54:02'!
withExpirationDate: aDate andName: aName andNumber: aNumber

	^ self new initializeWith: aDate! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:54:52'!
withExpirationDate: aDate andName: aName 

	^ self new initializeWith: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:54:52' prior: 50882094 overrides: 16927572!
setUp

	validCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Mr'.
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous) andName: 'Mr'! !

!methodRemoval: CreditCard class #withExpirationDate: stamp: 'ijgt 6/15/2021 16:54:52'!
withExpirationDate: aDate

	^ self new initializeWith: aDate!
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:55:24' prior: 50882982!
withExpirationDate: aDate andName: aName andNumber: aNumbre  

	^ self new initializeWith: aDate! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 16:55:24' prior: 50882995 overrides: 16927572!
setUp

	validCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Mr' andNumber: 111.
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous) andName: 'Mr' andNumber: 111! !

!methodRemoval: CreditCard class #withExpirationDate:andName: stamp: 'ijgt 6/15/2021 16:55:24'!
withExpirationDate: aDate andName: aName 

	^ self new initializeWith: aDate!
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 16:55:35' prior: 50883009!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	^ self new initializeWith: aDate! !

Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate name number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'ijgt 6/15/2021 16:59:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate name number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialize' stamp: 'ijgt 6/15/2021 17:00:38'!
initializeWith: aDate andName: aName 

	expirationDate := aDate.! !
!Sale methodsFor: 'initialization' stamp: 'ijgt 6/15/2021 17:00:38'!
initializeWith: aPrice andName: aName 

	price := aPrice ! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 17:00:38' prior: 50881489!
with: aPrice

	^ self new initializeWith: aPrice andName: 'Mr'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 17:00:38' prior: 50883031!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	^ self new initializeWith: aDate andName: 'Mr'! !

!methodRemoval: CreditCard #initializeWith: stamp: 'ijgt 6/15/2021 17:00:38'!
initializeWith: aDate

	expirationDate := aDate.!

!methodRemoval: Sale #initializeWith: stamp: 'ijgt 6/15/2021 17:00:38'!
initializeWith: aPrice

	price := aPrice !
!Sale methodsFor: 'initialization' stamp: 'ijgt 6/15/2021 17:01:26'!
initializeWith: aPrice andName: aName andNumber: aNumber  

	price := aPrice ! !
!CreditCard methodsFor: 'initialize' stamp: 'ijgt 6/15/2021 17:01:26'!
initializeWith: aDate andName: aName andNumber: aNumber  

	expirationDate := aDate.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 17:01:26' prior: 50883065!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	^ self new initializeWith: aDate andName: 'Mr' andNumber: 1111! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/15/2021 17:01:26' prior: 50883059!
with: aPrice

	^ self new initializeWith: aPrice andName: 'Mr' andNumber: 1111! !

!methodRemoval: Sale #initializeWith:andName: stamp: 'ijgt 6/15/2021 17:01:26'!
initializeWith: aPrice andName: aName 

	price := aPrice !

!methodRemoval: CreditCard #initializeWith:andName: stamp: 'ijgt 6/15/2021 17:01:26'!
initializeWith: aDate andName: aName 

	expirationDate := aDate.!
!CashierTest methodsFor: 'setUp' stamp: 'ijgt 6/15/2021 17:02:00' prior: 50883016 overrides: 16927572!
setUp

	validCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Mr' andNumber: '111'.
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous) andName: 'Mr' andNumber: '111'! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/15/2021 17:02:59' prior: 50883090!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard methodsFor: 'initialize' stamp: 'ijgt 6/15/2021 17:03:22' prior: 50883084!
initializeWith: aDate andName: aName andNumber: aNumber  

	expirationDate := aDate.
	name := aName.
	number := aNumber.! !

!methodRemoval: CashierTest #test06 stamp: 'ijgt 6/15/2021 17:03:34'!
test06

	|aCatalogue aCashier aCart aSalesLog invalidCreditCard|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	invalidCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Ignacio Javier Gonz�lez Tafler Bolainas' andNumber: 111.
	
	self should: [
		aCashier checkout: aCart payingWith: invalidCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 17:03:38'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 17:03:39'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'ijgt 6/15/2021 17:03:41'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'ijgt 6/15/2021 17:03:41'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'ijgt 6/15/2021 17:03:41'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'ijgt 6/15/2021 17:03:41'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'ijgt 6/15/2021 17:03:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:04:11'!
test01canNotCheckoutEmptyCart

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test01 stamp: 'ijgt 6/15/2021 17:04:11'!
test01

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutEmptyCartErrorDescription.
		self assert: aSalesLog isEmpty.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:04:34'!
test02canNotCheckoutExpiredCreditCard

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test02 stamp: 'ijgt 6/15/2021 17:04:34'!
test02

	|aCatalogue aCashier aCart aSalesLog|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	self should: [
		aCashier checkout: aCart payingWith: expiredCreditCard
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutWithExpiredCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:05:09'!
test03checkoutLogsSaleWithCorrectPrice

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: validCreditCard.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.
	self assert: aSale price equals: 5! !

!methodRemoval: CashierTest #test03 stamp: 'ijgt 6/15/2021 17:05:09'!
test03

	|aCatalogue aCashier aCart aSalesLog aSale creditCard debitAmount|
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	debitSimulator := [:anAmount :aCreditCard | debitAmount := anAmount. creditCard := aCreditCard ].
	
	aSale := aCashier checkout: aCart payingWith: validCreditCard.
	self assert: creditCard equals: validCreditCard.
	self assert: debitAmount equals: 5.
	self assert: aSalesLog includes: aSale.
	self assert: aSalesLog size equals: 1.
	self assert: aSale price equals: 5!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:05:36'!
test04canNptCheckoutCreditCardWithInsufficientFunds

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test04 stamp: 'ijgt 6/15/2021 17:05:36'!
test04

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:05:53'!
test04canNotCheckoutCreditCardWithInsufficientFunds

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test04canNptCheckoutCreditCardWithInsufficientFunds stamp: 'ijgt 6/15/2021 17:05:53'!
test04canNptCheckoutCreditCardWithInsufficientFunds

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:06:24'!
test05canNotCheckoutWithStolenCreditCard

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | self error: Cashier canNotDebitWithStolenCreditCardErrorDescription].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test05 stamp: 'ijgt 6/15/2021 17:06:24'!
test05

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | self error: Cashier canNotDebitWithStolenCreditCardErrorDescription].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotDebitWithStolenCreditCardErrorDescription.
		self assert: aSalesLog isEmpty.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/15/2021 17:06:35'!
test04canNotCheckoutWithCreditCardWithInsufficientFunds

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].! !

!methodRemoval: CashierTest #test04canNotCheckoutCreditCardWithInsufficientFunds stamp: 'ijgt 6/15/2021 17:06:35'!
test04canNotCheckoutCreditCardWithInsufficientFunds

	|aCatalogue aCashier aCart aSalesLog |
	aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
	aSalesLog := OrderedCollection new.
	aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
	debitSimulator := [:anAmount :aCreditCard | 
		self error: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription ].
	aCart := Cart acceptingItemsOf: aCatalogue keys.
	aCart add: 'aBook'.
	aCashier addCreditCardSimulator: self.
	
	self should: [
		aCashier checkout: aCart payingWith: validCreditCard .
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: Cashier canNotCheckoutCreditCardWithInsufficientFundsErrorDescription.
		self assert: aSalesLog isEmpty.
		].!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/15/2021 17:06:44'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/15/2021 17:06:44'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/15/2021 17:06:44'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/15/2021 17:06:44'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/15/2021 17:06:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/15/2021 17:06:48'!
PASSED!

----QUIT----(15 June 2021 17:07:32) CuisUniversity-4532.image priorSource: 17612530!

----STARTUP---- (16 June 2021 18:26:38) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!

!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 18:30:17'!
test06creditCardInvalidName

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Ignacio Javier Gonz�lez Tafler Bolainas' 
			andNumber: '111'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNameErrorDescription.
		].! !

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 18:31:08'!
FAILURE!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 18:31:08'!
FAILURE!
!CreditCard class methodsFor: 'nil' stamp: 'ijgt 6/16/2021 18:32:57'!
invalidNameErrorDescription

	^ 'Can not create credit card with a nameover 30 characters.'! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 18:34:24' prior: 50883123!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 18:34:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:13:30'!
test07creditCardInvalidNumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'ijgt 6/16/2021 19:15:52'!
invalidNumberErrorDescription

	^ 'Can not create credit card with an invalid number.'! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:17:47' prior: 50883609!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	(aNumber = aNumber withoutSeparators) and  ifTrue: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:26:20' prior: 50883639!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber = aNumber findPositiveInteger) ) ifTrue: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:26:30' prior: 50883652!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber = aNumber findPositiveInteger) ) ifFalse: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:29:47' prior: 50883666!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	(aNumber = aNumber withoutSeparators) ifFalse: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:29:56'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:30:15' prior: 50883621!
test07creditCardInvalidNumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'd o s'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !

!testRun: #CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:30:27'!
PASSED!
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:35:04' prior: 50883680!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber = aNumber asNumber))ifFalse: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:37:48' prior: 50883711!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) )ifFalse: [self error: self invalidNumberErrorDescription] .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !

!testRun: #CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:37:56'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:37:58'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:39:02' prior: 50883696!
test07creditCardInvalidNumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !

!testRun: #CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:39:03'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:39:42'!
test08creditCardInvalidNumberIsNotANumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:40:04'!
test07creditCardInvalidNumberContainsSeparators

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !

!methodRemoval: CashierTest #test07creditCardInvalidNumber stamp: 'ijgt 6/16/2021 19:40:04'!
test07creditCardInvalidNumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 19:40:12' prior: 50883814!
test07creditCardInvalidNumberContainsSeparators

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: '1 1 1'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].! !

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!

!testRun: #CashierTest #test08creditCardInvalidNumberIsNotANumber stamp: 'ijgt 6/16/2021 19:40:14'!
PASSED!
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:40:38'!
m1: aNumber m2: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) )ifFalse: [self error: self invalidNumberErrorDescription]! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:40:38' prior: 50883725!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	self m1: aNumber m2: aName .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:40:56' prior: 50883881!
m1: aNumber m2: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) ) ifFalse: [self error: self invalidNumberErrorDescription]! !
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 19:42:10'!
assertAreValidNumber: aNumber andName: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) ) ifFalse: [self error: self invalidNumberErrorDescription]! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/16/2021 19:42:10' prior: 50883892!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	self assertAreValidNumber: aNumber andName: aName .
	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !

!methodRemoval: CreditCard class #m1:m2: stamp: 'ijgt 6/16/2021 19:42:10'!
m1: aNumber m2: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) ) ifFalse: [self error: self invalidNumberErrorDescription]!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CashierTest #test08creditCardInvalidNumberIsNotANumber stamp: 'ijgt 6/16/2021 19:43:41'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/16/2021 19:43:44'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

!testRun: #CashierTest #test08creditCardInvalidNumberIsNotANumber stamp: 'ijgt 6/16/2021 19:43:50'!
PASSED!

----QUIT----(16 June 2021 19:44:11) CuisUniversity-4532.image priorSource: 17661721!

----STARTUP---- (16 June 2021 22:42:11) as /home/igna/Desktop/CuisNuevo/CuisUniversity-4532.image!


!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/16/2021 22:43:28'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'debitSimulator validCreditCard expiredCreditCard invalidNameCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 22:43:24' prior: 50883585!
test06creditCardInvalidName

    |aCatalogue aCashier aCart aSalesLog|
    aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
    aSalesLog := OrderedCollection new.
    aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
    aCart := Cart acceptingItemsOf: aCatalogue keys.
    aCart add: 'aBook'.
    self should: [
        aCashier checkout: aCart payingWith: invalidNameCreditCard 
        ] 
    raise: Error withExceptionDo: [:anError |
        self assert: anError messageText equals: Cashier canNotCheckoutWithInvalidNameCreditCardErrorDescription.
        self assert: aSalesLog isEmpty.
        ]! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'ijgt 6/16/2021 22:44:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'debitSimulator validCreditCard expiredCreditCard invalidNameCreditCard invalidNumberCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'ijgt 6/16/2021 22:43:57' prior: 50883838!
test07creditCardInvalidNumberContainsSeparators

    |aCatalogue aCashier aCart aSalesLog|
    aCatalogue := Dictionary new at: 'aBook' put: 5; yourself.
    aSalesLog := OrderedCollection new.
    aCashier := Cashier with: aCatalogue onDate: (Date today) andSalesLog: aSalesLog andMerchantProcessor: self.
    aCart := Cart acceptingItemsOf: aCatalogue keys.
    aCart add: 'aBook'.
    self should: [
        aCashier checkout: aCart payingWith: invalidNumberCreditCard 
        ] 
    raise: Error withExceptionDo: [:anError |
        self assert: anError messageText equals: Cashier canNotCheckoutWithInvalidNumberCreditCardErrorDescription.
        self assert: aSalesLog isEmpty.
        ].! !
!CashierTest methodsFor: 'setUp' stamp: 'ijgt 6/16/2021 22:46:01' prior: 50883113 overrides: 16927572!
setUp

	validCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Mr' andNumber: '111'.
	expiredCreditCard := CreditCard withExpirationDate: (Date today previous) andName: 'Mr' andNumber: '111'.
	invalidNameCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Ignacio Javier Gonz�lez Tafler Bolainas' andNumber: '111'.
	invalidNumberCreditCard := CreditCard withExpirationDate: (Date today next) andName: 'Calle Falsa' andNumber: '1 1 1'! !

!methodRemoval: CashierTest #test08creditCardInvalidNumberIsNotANumber stamp: 'ijgt 6/16/2021 22:46:10'!
test08creditCardInvalidNumberIsNotANumber

	self should: [
		CreditCard withExpirationDate: (Date today next) andName: 'Sneed Chuck' 
			andNumber: 'dos'
		] 
	raise: Error withExceptionDo: [:anError |
		self assert: anError messageText equals: CreditCard invalidNumberErrorDescription.
		].!
!CreditCard class methodsFor: 'creation' stamp: 'ijgt 6/16/2021 22:46:36' prior: 50883923!
withExpirationDate: aDate andName: aName andNumber: aNumber  

	^ self new initializeWith: aDate andName: aName andNumber: aNumber! !

!methodRemoval: CreditCard class #assertAreValidNumber:andName: stamp: 'ijgt 6/16/2021 22:46:44'!
assertAreValidNumber: aNumber andName: aName

	(aName size > 30) ifTrue: [self error: self invalidNameErrorDescription].
	((aNumber = aNumber withoutSeparators) and: (aNumber allSatisfy: [:aChar | aChar isDigit]) ) ifFalse: [self error: self invalidNumberErrorDescription]!

!methodRemoval: CreditCard class #invalidNumberErrorDescription stamp: 'ijgt 6/16/2021 22:46:54'!
invalidNumberErrorDescription

	^ 'Can not create credit card with an invalid number.'!

!methodRemoval: CreditCard class #invalidNameErrorDescription stamp: 'ijgt 6/16/2021 22:47:07'!
invalidNameErrorDescription

	^ 'Can not create credit card with a nameover 30 characters.'!
!Cashier methodsFor: 'nil' stamp: 'ijgt 6/16/2021 22:49:06'!
isAValidCreditCard: aCreditCard

    (aCreditCard isExpiredAt: date) ifTrue: [self error: self class canNotCheckoutWithExpiredCreditCardErrorDescription.].
    (aCreditCard hasAValidName) ifFalse:[self error: self class canNotCheckoutWithInvalidNameCreditCardErrorDescription ].
    (aCreditCard hasAValidNumber) ifFalse:[self error: self class canNotCheckoutWithInvalidNumberCreditCardErrorDescription ]! !
!CreditCard methodsFor: 'nil' stamp: 'ijgt 6/16/2021 22:50:09'!
hasAValidName! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ijgt 6/16/2021 22:50:46' prior: 50884172!
hasAValidName

	^ name size between: 1 and: 30! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ijgt 6/16/2021 22:50:59'!
hasAValidNumber

	^ name size between: 1 and: 30! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'ijgt 6/16/2021 22:52:37' prior: 50884181!
hasAValidNumber

	^ (number = number withoutSeparators) and: (number allSatisfy: [:aChar | aChar isDigit])! !
!Cashier methodsFor: 'checkout' stamp: 'ijgt 6/16/2021 22:54:34' prior: 50882696!
checkout: aCart payingWith: aCreditCard

	|totalPrice|
	
	aCart isEmpty ifTrue: [self error: self class canNotCheckoutEmptyCartErrorDescription.].
	self isAValidCreditCard: aCreditCard.
	
	totalPrice := aCart calculatePriceWithCashier: self.
	merchantProcessor debit: totalPrice with: aCreditCard.
	^ salesLog add: (Sale with: totalPrice).! !
!Cashier class methodsFor: 'nil' stamp: 'ijgt 6/16/2021 22:56:11'!
canNotCheckoutWithInvalidNameCreditCardErrorDescription

	^'Invalid name for a credit card.'! !
!Cashier class methodsFor: 'nil' stamp: 'ijgt 6/16/2021 22:56:35'!
canNotCheckoutWithInvalidNumberCreditCardErrorDescription

    ^'Can not checkout with an invalid credit card number'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'ijgt 6/16/2021 22:56:39' prior: 50884211!
canNotCheckoutWithInvalidNumberCreditCardErrorDescription

   	^'Can not checkout with an invalid credit card number'! !

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 22:57:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/16/2021 22:57:04'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 22:57:06'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 22:57:10'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 22:57:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ijgt 6/16/2021 22:57:38'!
PASSED!

!testRun: #CashierTest #test01canNotCheckoutEmptyCart stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test02canNotCheckoutExpiredCreditCard stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test03checkoutLogsSaleWithCorrectPrice stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test04canNotCheckoutWithCreditCardWithInsufficientFunds stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test05canNotCheckoutWithStolenCreditCard stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test06creditCardInvalidName stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!

!testRun: #CashierTest #test07creditCardInvalidNumberContainsSeparators stamp: 'ijgt 6/16/2021 22:57:39'!
PASSED!