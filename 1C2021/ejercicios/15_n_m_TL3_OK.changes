----STARTUP---- (17 June 2021 11:23:53) as /Users/urichami/Facu/ing1/inge1-1c-2021/Cuis/CuisUniversity-4532.image!


!classRemoval: #StoreTestObjects stamp: 'UC 6/17/2021 14:15:31'!
Object subclass: #StoreTestObjects
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MPSimulator stamp: 'UC 6/17/2021 14:15:32'!
Object subclass: #MPSimulator
	instanceVariableNames: 'stolenCards answerOk answerFake errorMessage'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'UC 6/17/2021 14:15:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'name number date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSale stamp: 'UC 6/17/2021 14:15:32'!
Object subclass: #CashierPerSale
	instanceVariableNames: 'catalog items priceChart cart creditCard salesbook used merchantProcessor total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'UC 6/17/2021 14:15:32'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'UC 6/17/2021 14:15:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierPerSaleTest stamp: 'UC 6/17/2021 14:15:33'!
TestCase subclass: #CashierPerSaleTest
	instanceVariableNames: 'testObjects today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'UC 6/17/2021 14:15:33'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/urichami/Facu/ing1/inge1-1c-2021/20-TusLibros/it2/TusLibros.st----!

!methodRemoval: CashierPerSaleTest #test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'UC 6/17/2021 20:37:17'!
test08CheckOutWithFakeCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithFakeCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeFakeCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.!

!methodRemoval: CashierPerSaleTest #test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'UC 6/17/2021 20:37:19'!
test09CheckOutWithInsolventCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithInsolventCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInsolventCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.!

!methodRemoval: CashierPerSaleTest #test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'UC 6/17/2021 20:37:21'!
test10CheckOutWithInvalidSmallAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook verySmallPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 0.0001.
	
	verySmallPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	verySmallPriceCart add: 'anotherBook'.


	cashier := self cashierWith: verySmallPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: verySmallPriceCart isEmpty not.!

!methodRemoval: CashierPerSaleTest #test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook stamp: 'UC 6/17/2021 20:37:23'!
test11CheckOutWithInvalidBigAmountRaisesErrorAndLeavesUntouchedSalesBook

	| cashier salesBook veryBigPriceCart newCatalogue |
	
	salesBook := OrderedCollection new.
	
	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 99999999999999999999.
	
	veryBigPriceCart := Cart acceptingItemsOf: newCatalogue.
	
	veryBigPriceCart add: 'anotherBook'.


	cashier := self cashierWith: veryBigPriceCart
				registeringOn: salesBook 
				with: MPSimulator answerWithOk.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeInvalidAmount  equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: veryBigPriceCart isEmpty not.!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/17/2021 20:39:51'!
test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithStolenCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: CashierPerSaleTest #test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook stamp: 'UC 6/17/2021 20:39:51'!
test07CheckOutWithStolenCardRaisesErrorAndLeavesUntouchedSalesBook

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithStolenCard.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.!
!MPSimulator class methodsFor: 'instance creation' stamp: 'UC 6/17/2021 20:40:05'!
answerWithError
	^ self new initializeWithStolenCard! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 20:40:05' prior: 50876416!
test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithError.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator cannotChargeStolenCard equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: MPSimulator class #answerWithStolenCard stamp: 'UC 6/17/2021 20:40:05'!
answerWithStolenCard
	^ self new initializeWithStolenCard!
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/17/2021 20:40:25'!
initializeWithError
	self setUpErrorMessage: self class cannotChargeStolenCard.! !
!MPSimulator class methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 20:40:25' prior: 50876457!
answerWithError
	^ self new initializeWithError! !

!methodRemoval: MPSimulator #initializeWithStolenCard stamp: 'UC 6/17/2021 20:40:25'!
initializeWithStolenCard
	self setUpErrorMessage: self class cannotChargeStolenCard.!
!MPSimulator methodsFor: 'initialization' stamp: 'UC 6/17/2021 20:40:44' prior: 50876486!
initializeWithError
	answerOk := false! !

!methodRemoval: MPSimulator #initializeWithFakeCard stamp: 'UC 6/17/2021 20:40:49'!
initializeWithFakeCard
	self setUpErrorMessage: self class cannotChargeFakeCard.!

!methodRemoval: MPSimulator #initializeWithInsolventCard stamp: 'UC 6/17/2021 20:40:51'!
initializeWithInsolventCard
	self setUpErrorMessage: self class cannotChargeInsolventCard.!

!methodRemoval: MPSimulator #setUpErrorMessage: stamp: 'UC 6/17/2021 20:40:53'!
setUpErrorMessage: anErrorMessage

	errorMessage := anErrorMessage.
	answerOk := false!
!MPSimulator methodsFor: 'operations' stamp: 'UC 6/17/2021 20:41:32' prior: 50876161!
charge: anAmount on: aCreditCard
	answerOk ifFalse: [ self error: self class errorProcessingPayment].! !

!methodRemoval: MPSimulator #assertAmountIsValid: stamp: 'UC 6/17/2021 20:41:42'!
assertAmountIsValid: anAmount. 
	((anAmount < 0.01) or:[(anAmount numberOfDigitsInBase: 10) > 15 ]) ifTrue:[self error: self class cannotChargeInvalidAmount]!

!methodRemoval: MPSimulator class #answerWithFakeCard stamp: 'UC 6/17/2021 20:41:49'!
answerWithFakeCard
	^self new initializeWithFakeCard !

!methodRemoval: MPSimulator class #answerWithInsolventCard stamp: 'UC 6/17/2021 20:41:50'!
answerWithInsolventCard
	^self new initializeWithInsolventCard!

!methodRemoval: MPSimulator class #cannotChargeFakeCard stamp: 'UC 6/17/2021 20:41:52'!
cannotChargeFakeCard
	^'La tarjeta se encuentra reportada como falsa por el MerchantProcessor'.!

!methodRemoval: MPSimulator class #cannotChargeInsolventCard stamp: 'UC 6/17/2021 20:41:52'!
cannotChargeInsolventCard
	^'La tarjeta se encuentra reportada como insolvente por el MerchantProcessor'!

!methodRemoval: MPSimulator class #cannotChargeInvalidAmount stamp: 'UC 6/17/2021 20:41:53'!
cannotChargeInvalidAmount
	^'El monto a cobrar debe ser mayor a 0.01 y tener menos de 15 digitos'.!
!MPSimulator class methodsFor: 'error messages' stamp: 'UC 6/17/2021 20:42:02'!
errorProcessingPayment
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 20:42:02' prior: 50876462!
test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart

	| cashier oneItemCart salesBook |
	
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.
	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook 
				with: MPSimulator answerWithError.
	
	self should: [	cashier checkout.] 
		raise: Error
		      withExceptionDo: [:anError | self assert: MPSimulator errorProcessingPayment equals: anError messageText].
		
	self assert: salesBook isEmpty.
	self assert: oneItemCart isEmpty not.! !

!methodRemoval: MPSimulator class #cannotChargeStolenCard stamp: 'UC 6/17/2021 20:42:02'!
cannotChargeStolenCard
	^'La tarjeta se encuentra reportada como robada por el MerchantProcessor'.!
!MPSimulator class methodsFor: 'error messages' stamp: 'UC 6/17/2021 20:42:27' prior: 50876564!
errorProcessingPayment
	^'Hubo un error procesando el pago con su tarjeta'.! !

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/17/2021 20:42:48'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/17/2021 20:42:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/17/2021 20:42:53'!
PASSED!

TestCase subclass: #StoreFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'UC 6/17/2021 20:44:03'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/17/2021 20:53:59'!
Object subclass: #StoreFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'nil' stamp: 'UC 6/17/2021 20:53:48'!
test01
	| store |
	store := StoreFacade new.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:54:10'!
ERROR!

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:54:10'!
ERROR!
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/17/2021 20:54:25'!
invalidClientIdOrPassword
	self shouldBeImplemented.! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/17/2021 20:55:12' prior: 50876742!
invalidClientIdOrPassword
	^'Contrase�a o id de cliente inv�lido. Porfavor, intente de nuevo'! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:55:14'!
FAILURE!

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:55:46'!
PASSED!

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:55:48'!
FAILURE!

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:55:48'!
FAILURE!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/17/2021 20:58:50'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'nil' stamp: 'UC 6/17/2021 20:58:55'!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 20:59:32' prior: 50876769!
createCartWithUserId: aClientId andPassword: aPassword
	self error: StoreFacade invalidClientIdOrPassword.! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 20:59:38'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:02:21'!
test02
	| store id |
	store := StoreFacade new.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:02:29'!
PASSED!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:02:29'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:02:29'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:04:11' prior: 50876785!
test02
	| store id |
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:05:47' prior: 50876800!
test02
	| store id |
	self answerLoginWithSuccess.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:06:03' prior: 50876809!
test02
	| store id |
	self setLoginWithSuccess.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'UC 6/17/2021 21:07:52'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'loginWithSuccess'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'nil' stamp: 'UC 6/17/2021 21:07:50'!
setLoginWithSuccess
	loginWithSuccess := true! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:09:47'!
login: aClientId with: aPassword
	loginWithSuccess ifTrue: [StoreFacade invalidClientIdOrPassword]! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:09:58' prior: 50876839!
login: aClientId with: aPassword
	loginWithSuccess ifTrue: [self error: StoreFacade invalidClientIdOrPassword]! !

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:10:04'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:10:04'!
ERROR!
!StoreFacade class methodsFor: 'nil' stamp: 'UC 6/17/2021 21:10:54'!
with: aClientAuthenticator
	self new initializeWith: aClientAuthenticator.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:11:28'!
initializeWith: aClientAuthenticator
	clientAuthenticator := aClientAuthenticator.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:11:50' prior: 50876776!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.! !

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:13:03'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:13:03'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:16:38' overrides: 16927572!
setUp
	loginWithSuccess := nil.! !

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:16:51'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:16:51'!
ERROR!
!StoreFacade class methodsFor: 'instance creation' stamp: 'UC 6/17/2021 21:17:18' prior: 50876857!
with: aClientAuthenticator
	^self new initializeWith: aClientAuthenticator.! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:17:21'!
FAILURE!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:17:21'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:17:24'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:19:11' prior: 50876880 overrides: 16927572!
setUp
	loginWithSuccess := true.! !

!methodRemoval: StoreFacadeTest #setLoginWithSuccess stamp: 'UC 6/17/2021 21:19:44'!
setLoginWithSuccess
	loginWithSuccess := true!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:20:00' prior: 50876818!
test02
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:02'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:02'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:20:19' prior: 50876846!
login: aClientId with: aPassword
	loginWithSuccess ifFalse: [self error: StoreFacade invalidClientIdOrPassword]! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:20:21'!
FAILURE!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:21'!
ERROR!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:23'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:20:30'!
listCart: aStoreFacade 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:20:42' prior: 50876940!
listCart: aStoreFacade 
	^OrderedCollection new.! !

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:43'!
PASSED!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:20:47'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:21:03' prior: 50876726!
test01
	| store |
	loginWithSuccess := false.
	store := StoreFacade with: self.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:21:04'!
PASSED!

!testRun: #StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:21:07'!
PASSED!

!testRun: #StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:21:07'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:24:18'!
test03
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:25:01'!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	loginWithSuccess := false.
	store := StoreFacade with: self.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !

!methodRemoval: StoreFacadeTest #test01 stamp: 'UC 6/17/2021 21:25:01'!
test01
	| store |
	loginWithSuccess := false.
	store := StoreFacade with: self.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:26:51'!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	! !

!methodRemoval: StoreFacadeTest #test02 stamp: 'UC 6/17/2021 21:26:51'!
test02
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	(store listCart: id) isEmpty.
	!

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'UC 6/17/2021 21:29:41'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'loginWithSuccess testObjects'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:29:50' prior: 50876975!
test03
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self catalogue: testObjects defaultCatalogue.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByStore toCart: id.
	(store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:30:04' prior: 50877035!
test03
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self catalogue: testObjects defaultCatalogue.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByStore toCart: id.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/17/2021 21:30:20' prior: 50877009!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	loginWithSuccess := true.
	store := StoreFacade with: self.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	self assert: (store listCart: id) isEmpty.
	! !

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/17/2021 21:30:23'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!

----QUIT----(18 June 2021 10:36:36) CuisUniversity-4532.image priorSource: 17396945!

----STARTUP---- (19 June 2021 14:47:19) as /Users/urichami/Facu/ing1/inge1-1c-2021/Cuis/CuisUniversity-4532.image!

!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:47:56'!
createStore

	^ StoreFacade with: self catalogue: testObjects defaultCatalogue! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:47:56' prior: 50877047!
test03
	| store id |
	loginWithSuccess := true.
	store := self createStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByStore toCart: id.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:48:12'!
sampleStore

	^ StoreFacade with: self catalogue: testObjects defaultCatalogue! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:48:12' prior: 50877084!
test03
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByStore toCart: id.
	! !

!methodRemoval: StoreFacadeTest #createStore stamp: 'UC 6/19/2021 14:48:12'!
createStore

	^ StoreFacade with: self catalogue: testObjects defaultCatalogue!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:48:41'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:48:41'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:49:23' prior: 50876903 overrides: 16927572!
setUp
	loginWithSuccess := true.
	testObjects := StoreTestObjects new.! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:49:35'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:49:35'!
ERROR!
!StoreFacade class methodsFor: 'instance creation' stamp: 'UC 6/19/2021 14:53:49'!
with: aClientAuthenticator catalogue: aCatalogue
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 14:54:15'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:54:14'!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:54:24'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:54:24'!
ERROR!

StoreTestObjects!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:55:23' prior: 50877100!
test03
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:55:24'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:55:24'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:55:32'!
add: aSmallInteger of: aString toCart: aStoreFacade 
	self shouldBeImplemented.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:55:35' prior: 50877171!
add: aSmallInteger of: aString toCart: aStoreFacade 
	! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 14:55:36'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:56:08' prior: 50877177!
add: anAmount of: anItem toCart: aCartId 
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:58:06' prior: 50876868!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	^1! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 14:59:27' prior: 50877157!
test03
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore 
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:00:41' prior: 50877197!
test03
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore 
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:00:42' prior: 50877211!
test03
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:00:46'!
FAILURE!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:00:46'!
FAILURE!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 15:02:10'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:02:09' prior: 50877190!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cart := (Cart acceptingItemsOf: catalogue).
	^1! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:03:01' prior: 50877185!
add: anAmount of: anItem toCart: aCartId 
	cart add: anAmount of: anItem.
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:03:16' prior: 50876945!
listCart: aStoreFacade 
	^cart items.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:03:19'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:03:19'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:03:19'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:03:25'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'UC 6/19/2021 15:03:50'!
items
	^items copy! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:04:00'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:04:00'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:04:00'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:04:00'!
ERROR!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:04:27'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:04:35' prior: 50877058!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	self assert: (store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:04:46' prior: 50876984!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	loginWithSuccess := false.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:04:48'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:04:50'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:04:50'!
PASSED!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:04:50'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:05:44'!
test04
	| store id id2 |
	loginWithSuccess := true.
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	id2 := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:06:59' prior: 50877094!
sampleStore
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:09' prior: 50877303!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	self assert: (store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:13' prior: 50877225!
test03
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:17' prior: 50877340!
test04
	| store id id2 |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	id2 := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:45' prior: 50877314!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	loginWithSuccess := false.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:53'!
setLoginToFail

	^ loginWithSuccess := false! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:07:53' prior: 50877401!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	self setLoginToFail.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:09:27' prior: 50877385!
test04
	| store xx yy |
	store := self sampleStore.
	xx := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	yy := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 1 of: testObjects itemSellByTheStore toCart: xx.
	store add: 1 of: testObjects itemSellByTheStore toCart: yy.
	
	self assert: 1 equals: (store listCart: xx) size.
	self assert: (store listCart: xx) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: yy) size.
	self assert: (store listCart: yy) includes: testObjects itemSellByTheStore.
	! !

!testRun: #StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:09:29'!
FAILURE!

!testRun: #StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:09:29'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:09:48' prior: 50877267!
listCart: aCartId 
	^cart items.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 15:12:39'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue cart carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:12:38' prior: 50877252!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	
	carts addLast: (Cart acceptingItemsOf: catalogue).
	^carts size.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:12:44' prior: 50877472!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	carts addLast: (Cart acceptingItemsOf: catalogue).
	^carts size.! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 15:13:35'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue cart carts cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:13:34' prior: 50877481!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue).
	^cartId! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:13:45' prior: 50877144!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.! !

!methodRemoval: StoreFacade #initializeWith: stamp: 'UC 6/19/2021 15:13:48'!
initializeWith: aClientAuthenticator
	clientAuthenticator := aClientAuthenticator.!

!methodRemoval: StoreFacade class #with: stamp: 'UC 6/19/2021 15:13:52'!
with: aClientAuthenticator
	^self new initializeWith: aClientAuthenticator.!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:14:08' prior: 50877508!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:15:17' prior: 50877498!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue).
	^cartId! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:15:44' prior: 50877460!
listCart: aCartId 
	^(carts at: aCartId) items.! !

Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue carts cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 15:16:01'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue carts cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:16:32' prior: 50877261!
add: anAmount of: anItem toCart: aCartId 
	(carts at: aCartId) add: anAmount of: anItem.
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:16:39'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:16:39'!
PASSED!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:16:39'!
PASSED!

!testRun: #StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:16:39'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:19:44'!
test05
	| store |
	store := self sampleStore.
	
	self should: (store listCart: 1) 
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/19/2021 15:20:17'!
cannotFindCartForThatId
	^''! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:21:20' prior: 50877581!
test05
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/19/2021 15:21:46' prior: 50877590!
cannotFindCartForThatId
	^'No se encontr� un carrito activo para ese Id'! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/19/2021 15:21:49' prior: 50877605!
cannotFindCartForThatId
	^'No se encontr� un carrito activo para ese ID'! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/19/2021 15:21:53' prior: 50877611!
cannotFindCartForThatId
	^'No se encontr� un carrito activo para ese Id'! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:24:09' prior: 50877545!
listCart: aCartId 
	^(carts at: aCartId ifAbsent: [self error: self class cannotFindCartForThatId ]) items.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:24:19' prior: 50877563!
add: anAmount of: anItem toCart: aCartId 
	(carts at: aCartId  ifAbsent: [self error: self class cannotFindCartForThatId ]) add: anAmount of: anItem.
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:24:25'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:24:25'!
PASSED!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:24:25'!
PASSED!

!testRun: #StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:24:25'!
PASSED!

!testRun: #StoreFacadeTest #test05 stamp: 'UC 6/19/2021 15:24:26'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:24:54'!
findCartById: aCartId

	^ carts at: aCartId ifAbsent: [self error: self class cannotFindCartForThatId ]! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:24:54' prior: 50877623!
listCart: aCartId 
	^(self findCartById: aCartId) items.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:25:11' prior: 50877630!
add: anAmount of: anItem toCart: aCartId 
	(self findCartById: aCartId) add: anAmount of: anItem.
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:25:14'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:25:14'!
PASSED!

!testRun: #StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:25:14'!
PASSED!

!testRun: #StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:25:14'!
PASSED!

!testRun: #StoreFacadeTest #test05 stamp: 'UC 6/19/2021 15:25:14'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:27:14'!
test03AddedItemToOneCartIsListedById
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !

!methodRemoval: StoreFacadeTest #test03 stamp: 'UC 6/19/2021 15:27:14'!
test03
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:27:54'!
test04AddedItemsToMultipleCartsAreListedById
	| store xx yy |
	store := self sampleStore.
	xx := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	yy := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 1 of: testObjects itemSellByTheStore toCart: xx.
	store add: 1 of: testObjects itemSellByTheStore toCart: yy.
	
	self assert: 1 equals: (store listCart: xx) size.
	self assert: (store listCart: xx) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: yy) size.
	self assert: (store listCart: yy) includes: testObjects itemSellByTheStore.
	! !

!methodRemoval: StoreFacadeTest #test04 stamp: 'UC 6/19/2021 15:27:54'!
test04
	| store xx yy |
	store := self sampleStore.
	xx := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	yy := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 1 of: testObjects itemSellByTheStore toCart: xx.
	store add: 1 of: testObjects itemSellByTheStore toCart: yy.
	
	self assert: 1 equals: (store listCart: xx) size.
	self assert: (store listCart: xx) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: yy) size.
	self assert: (store listCart: yy) includes: testObjects itemSellByTheStore.
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:28:14' prior: 50877711!
test04AddedItemsToMultipleCartsAreListedById
	| store xx yy |
	store := self sampleStore.
	xx := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	yy := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: xx.
	store add: 2 of: testObjects itemSellByTheStore toCart: yy.
	
	self assert: 1 equals: (store listCart: xx) size.
	self assert: (store listCart: xx) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: yy) size.
	self assert: (store listCart: yy) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:28:45' prior: 50877754!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 yy |
	store := self sampleStore.
	cartId1 := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	yy := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: yy.
	
	self assert: 1 equals: (store listCart: cartId1) size.
	self assert: (store listCart: cartId1) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: yy) size.
	self assert: (store listCart: yy) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:28:50' prior: 50877777!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 cartId2 |
	store := self sampleStore.
	cartId1 := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	cartId2 := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId2.
	
	self assert: 1 equals: (store listCart: cartId1) size.
	self assert: (store listCart: cartId1) includes: testObjects itemSellByTheStore.
	
	self assert: 1 equals: (store listCart: cartId2) size.
	self assert: (store listCart: cartId2) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:30:07' prior: 50877800!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 cartId2 |
	store := self sampleStore.
	cartId1 := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	cartId2 := store createCartWithUserId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId2.
	
	self assert: 2 equals: (store listCart: cartId1) size.
	self assert: ((store listCart: cartId1) at: 1) equals: testObjects itemSellByTheStore.
	self assert: ((store listCart: cartId1) at: 2) equals: testObjects itemSellByTheStore.
	
	self assert: 2 equals: (store listCart: cartId2) size.
	self assert: ((store listCart: cartId2) at: 1) equals: testObjects itemSellByTheStore.
	self assert: ((store listCart: cartId2) at: 2) equals: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:32:08'!
test05ListCartForInexistentIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !

!methodRemoval: StoreFacadeTest #test05 stamp: 'UC 6/19/2021 15:32:08'!
test05
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:32:22'!
test05ListCartForAbsentIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !

!methodRemoval: StoreFacadeTest #test05ListCartForInexistentIdRaisesError stamp: 'UC 6/19/2021 15:32:22'!
test05ListCartForInexistentIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:33:03'!
test06
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:33:56' prior: 50877894!
test06
	| store id |
	store := self sampleStore.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:34:34' prior: 50877904!
test06
	| store id |
	store := self sampleStore.
	
	self should: [store add: 1 of: testObjects itemSellByTheStore toCart: 1]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].! !

!testRun: #StoreFacadeTest #test06 stamp: 'UC 6/19/2021 15:34:46'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:35:32'!
test06AddItemForAbsentCartIdRaisesError
	| store id |
	store := self sampleStore.
	
	self should: [store add: 1 of: testObjects itemSellByTheStore toCart: 1]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].! !

!methodRemoval: StoreFacadeTest #test06 stamp: 'UC 6/19/2021 15:35:32'!
test06
	| store id |
	store := self sampleStore.
	
	self should: [store add: 1 of: testObjects itemSellByTheStore toCart: 1]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:35:37'!
test05ListCartForAbsentCartIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	! !

!methodRemoval: StoreFacadeTest #test05ListCartForAbsentIdRaisesError stamp: 'UC 6/19/2021 15:35:37'!
test05ListCartForAbsentIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store listCart: 1]
	raise: Error
	withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:36:30' prior: 50877685!
test03AddedItemToOneCartIsListedById
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: 'a' toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 15:36:32'!
ERROR!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 15:36:32'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:36:44' prior: 50877968!
test03AddedItemToOneCartIsListedById
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 15:36:56'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 15:36:56'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 15:36:56'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 15:36:56'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 15:36:56'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 15:36:56'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:39:09'!
test07
	| store |
	store := self sampleStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 15:39:28' prior: 50878023!
test07
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	self assert: (store listCart: id) isEmpty.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:00:57'!
xtest08
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	store listPurchases: 'davidYUriel'.
	
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:01:22' prior: 50878028!
test07
	| store id |
	store := self sampleStore.
	store listPurchases: 'davidYUriel'.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:04:28' prior: 50878047!
test07
	| store |
	store := self sampleStore.
	self assert: 0 equals: ((store listPurchases: 'davidYUriel') at: 'total').! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:05:20'!
listPurchases: aClientId
	| dic |
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:05:27'!
PASSED!

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:05:27'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:05:52'!
test08
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	store listPurchases: 'davidYUriel'.
	
	
	! !

!methodRemoval: StoreFacadeTest #xtest08 stamp: 'UC 6/19/2021 16:05:54'!
xtest08
	| store id |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	store listPurchases: 'davidYUriel'.
	
	
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:08:35' prior: 50878089!
test08
	| store id xx |
	store := self sampleStore.
	id := store createCartWithUserId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchases: 'davidYUriel'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:09:09' prior: 50878053!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchases: 'davidYUriel').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:09:49' prior: 50878126!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09'!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue).
	^cartId! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09' prior: 50877420!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	self setLoginToFail.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09' prior: 50877824!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 cartId2 |
	store := self sampleStore.
	cartId1 := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	cartId2 := store createCartWithClientId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId2.
	
	self assert: 2 equals: (store listCart: cartId1) size.
	self assert: ((store listCart: cartId1) at: 1) equals: testObjects itemSellByTheStore.
	self assert: ((store listCart: cartId1) at: 2) equals: testObjects itemSellByTheStore.
	
	self assert: 2 equals: (store listCart: cartId2) size.
	self assert: ((store listCart: cartId2) at: 1) equals: testObjects itemSellByTheStore.
	self assert: ((store listCart: cartId2) at: 2) equals: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09' prior: 50877362!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	self assert: (store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09' prior: 50877988!
test03AddedItemToOneCartIsListedById
	| store id |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:09' prior: 50878110!
test08
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchases: 'davidYUriel'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !

!methodRemoval: StoreFacade #createCartWithUserId:andPassword: stamp: 'UC 6/19/2021 16:10:09'!
createCartWithUserId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue).
	^cartId!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:10:25' prior: 50878136!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchases: 'davidYUriel').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:09'!
listPurchases: aClientId withPassword: aPassword 
	| dic |
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:09' prior: 50878224!
test08
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchases: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:09' prior: 50878250!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchases: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacade #listPurchases: stamp: 'UC 6/19/2021 16:11:09'!
listPurchases: aClientId
	| dic |
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:27'!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic |
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:27' prior: 50878266!
test08
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:11:27' prior: 50878283!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacade #listPurchases:withPassword: stamp: 'UC 6/19/2021 16:11:27'!
listPurchases: aClientId withPassword: aPassword 
	| dic |
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:14:55'!
test09
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !

!methodRemoval: StoreFacadeTest #test08 stamp: 'UC 6/19/2021 16:14:55'!
test08
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:14:58'!
test08
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:14:58'!
test07
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:15:56'!
test07
	| store purchases |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
	raise: Error 
	withExceptionDo: [:error | ]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:16:01' prior: 50878390!
test07
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
	raise: Error 
	withExceptionDo: [:error | ]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:16:20' prior: 50878400!
test07
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
	raise: Error 
	withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:16:26' prior: 50878410!
test07
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:16:30' prior: 50878422!
test07
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:16:32'!
FAILURE!

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:16:32'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:17:55' prior: 50878298!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic |
	clientAuthenticator login: aClientId with: aPassword.
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic! !

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:17:56'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test08 stamp: 'UC 6/19/2021 16:18:01'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:18:01'!
ERROR!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:18:01'!
ERROR!

!testRun: #StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:18:08'!
PASSED!

!testRun: #StoreFacadeTest #test08 stamp: 'UC 6/19/2021 16:18:10'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:19:15'!
checkoutCart: aCartId! !

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:19:34'!
FAILURE!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:19:34'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:21:18' prior: 50878497!
checkoutCart: aCartId
	self findCartById: aCartId.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:24:01'!
test07CheckoutForAbsentCartIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [store checkoutCart: 1]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:24:12'!
test10
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !

!methodRemoval: StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:24:12'!
test09
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:24:16'!
test09
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacadeTest #test08 stamp: 'UC 6/19/2021 16:24:16'!
test08
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:24:22'!
test08
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !

!methodRemoval: StoreFacadeTest #test07 stamp: 'UC 6/19/2021 16:24:22'!
test07
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:25:01'!
test08ListPurchasesForInvalidClientIdOrPasswordRaisesError
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !

!methodRemoval: StoreFacadeTest #test08 stamp: 'UC 6/19/2021 16:25:01'!
test08
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: 'davidYUriel' withPassword: 'xx'] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:25:09'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:25:11'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:25:13'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:25:14'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:25:24'!
FAILURE!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:25:24'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:30:07'!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  Date today
			registeringOn:  OrderedCollection new
			with: MPSimulator answerWithOk 
	
	! !

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 16:31:19'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue carts cartId salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:31:17' prior: 50877526!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.! !

!methodRemoval: StoreFacade #checkoutCart: stamp: 'UC 6/19/2021 16:31:25'!
checkoutCart: aCartId
	self findCartById: aCartId.!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/19/2021 16:31:46'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue carts cartId salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:31:45' prior: 50878637!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  Date today
			registeringOn:  salesBook
			with: merchantProcessor
	
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:32:00' prior: 50878663!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:32:50'!
initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor 
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.! !
!StoreFacade class methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:32:50' prior: 50877130!
with: aClientAuthenticator catalogue: aCatalogue
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: MPSimulator answerWithOk.! !

!methodRemoval: StoreFacade #initializeWith:catalogue: stamp: 'UC 6/19/2021 16:32:50'!
initializeWith: aClientAuthenticator catalogue: aCatalogue
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.!
!StoreFacade class methodsFor: 'instance creation' stamp: 'UC 6/19/2021 16:34:52'!
with: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor 
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: MPSimulator answerWithOk.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:34:52' prior: 50877356!
sampleStore
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk! !

!methodRemoval: StoreFacade class #with:catalogue: stamp: 'UC 6/19/2021 16:34:52'!
with: aClientAuthenticator catalogue: aCatalogue
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: MPSimulator answerWithOk.!
!StoreFacade class methodsFor: 'instance creation' stamp: 'UC 6/19/2021 16:34:58' prior: 50878746!
with: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor 
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:36:17' prior: 50878686!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  Date today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:36:46' prior: 50878451!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic |
	clientAuthenticator login: aClientId with: aPassword.
	
	dic := Dictionary new.
	dic at: 'total' put: 0.
	^dic! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/19/2021 16:38:41'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierPerSale methodsFor: 'checkout' stamp: 'UC 6/19/2021 16:38:35' prior: 50875985!
registerEndOfCheckout
	used := true.
	salesbook add: (Sale for: total withItems: cart items).
	cart clear.
	^total.! !

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 16:39:00'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:39:00'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 16:39:00'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 16:39:00'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:39:00'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 16:39:00'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 16:39:00'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:39:03'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'UC 6/19/2021 16:39:09'!
for: aSmallInteger withItems: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger withItems: anOrderedCollection ! !
!Sale class methodsFor: 'instance creation' stamp: 'UC 6/19/2021 16:39:51' prior: 50878851!
for: aTotal withItems: anItemList 
	^self new initializeFor: aTotal withItems: anItemList ! !

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:39:53'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/19/2021 16:40:06'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/19/2021 16:40:06'!
Object subclass: #Sale
	instanceVariableNames: 'total itemList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'UC 6/19/2021 16:40:06'!
initializeFor: aTotal withItems: anItemList 
	self shouldBeImplemented.
	total := aTotal.
	itemList := anItemList.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/19/2021 16:40:17'!
Object subclass: #Sale
	instanceVariableNames: 'total itemList items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'UC 6/19/2021 16:40:14' prior: 50878884!
initializeFor: aTotal withItems: anItemList 
	total := aTotal.
	items := anItemList.! !

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:40:19'!
PASSED!

Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/19/2021 16:40:33'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'nil' stamp: 'UC 6/19/2021 16:40:43'!
total
	^total! !
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:40:51'!
items
	^items! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:44:22' prior: 50878799!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic aSale |
	clientAuthenticator login: aClientId with: aPassword.
	aSale := salesBook at: 1.
	dic := Dictionary new.
	dic at: 'total' put: aSale total.
	dic at: (aSale items at: 1) put: 1.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:44:34'!
FAILURE!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:44:34'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:44:34'!
ERROR!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:44:35'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:46:21' prior: 50878522!
test10
	| store id xx |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id withCardNumber: testObjects validCardNumber expiring: testObjects notExpiredMonthOfYear ownedBy: testObjects validCardName.
	xx := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: xx keys size.
	self assert: 100 equals: (xx at: 'total').
	self assert: 1 equals: (xx at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:46:38' prior: 50878970!
test10
	| store id purchases |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	store checkoutCart: id withCardNumber: testObjects validCardNumber expiring: testObjects notExpiredMonthOfYear ownedBy: testObjects validCardName.
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: (purchases at: testObjects itemSellByTheStore ).
	! !

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:46:41'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:46:46'!
FAILURE!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:46:46'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:46:46'!
ERROR!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:46:46'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:49:39' prior: 50878925!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic aSale |
	dic := Dictionary new.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	aSale := salesBook at: 1.
	
	dic at: 'total' put: aSale total.
	dic at: (aSale items at: 1) put: 1.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:49:43'!
FAILURE!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:49:43'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:49:43'!
FAILURE!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:51:27'!
sampleCheckoutIn: store for: id

	^ store checkoutCart: id withCardNumber: testObjects validCardNumber expiring: testObjects notExpiredMonthOfYear ownedBy: testObjects validCardName! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:51:27' prior: 50878991!
test10
	| store id purchases |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: (purchases at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 16:51:49' prior: 50878511!
test07CheckoutForAbsentCartIdRaisesError
	| store |
	store := self sampleStore.
	
	self should: [self sampleCheckoutIn: store for: 1]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade cannotFindCartForThatId equals: error messageText ].! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 16:51:51'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:51:55'!
FAILURE!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 16:51:55'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:51:55'!
FAILURE!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 16:58:55'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:58:56'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 16:58:56'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 16:58:56'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:58:56'!
FAILURE!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 16:58:56'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 16:58:56'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:58:56'!
FAILURE!
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/19/2021 16:59:36' prior: 50875582!
test05CheckOutRegistersASale
	| cashier oneItemCart salesBook total |
	salesBook := OrderedCollection new.
	oneItemCart := self oneItemCart.

	cashier := self cashierWith: oneItemCart 
				registeringOn: salesBook.
				
	total := cashier checkout.
	
	self assert: 1 equals: salesBook size.
	self assert:  total equals: salesBook first total.
	! !

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 16:59:38'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 16:59:38'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'UC 6/19/2021 17:03:36' prior: 50875435!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjects emptyCartWithDefaultCatalogue.
	
	cart add: testObjects itemSellByTheStore.
	self assert: (cart includes: testObjects itemSellByTheStore)! !
!Cart methodsFor: 'adding' stamp: 'UC 6/19/2021 17:04:45' prior: 50875901!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity.
! !
!Cart methodsFor: 'initialization' stamp: 'UC 6/19/2021 17:05:01' prior: 50875871!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/19/2021 17:05:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/19/2021 17:05:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/19/2021 17:05:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/19/2021 17:05:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/19/2021 17:05:05'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 17:05:07'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:05:07'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 17:05:07'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 17:05:07'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 17:05:07'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 17:05:07'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 17:05:07'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:05:15'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'UC 6/19/2021 17:05:51' prior: 50875876!
clear
	items := Bag new.
	^items! !

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:05:52'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 17:05:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/19/2021 17:06:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:06:05'!
ERROR!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:06:05'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:06:05'!
ERROR!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:06:11'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:08:02' prior: 50878170!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 cartId2 |
	store := self sampleStore.
	cartId1 := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	cartId2 := store createCartWithClientId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId2.
	
	self assert: 2 equals: (store listCart: cartId1) size.
	self assert: 2 equals: ((store listCart: cartId1) occurrencesOf: testObjects itemSellByTheStore).
	
	self assert: 2 equals: (store listCart: cartId2) size.
	self assert: 2 equals: ((store listCart: cartId2) occurrencesOf: testObjects itemSellByTheStore).
	! !

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:08:04'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:08:49'!
ERROR!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:08:49'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:13:03' prior: 50879048!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic aSale |
	dic := Dictionary new.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	aSale := salesBook at: 1.
	
	dic at: 'total' put: aSale total.
	aSale items do: [ :key |
		dic at: key put: (aSale items occurrencesOf: key).
	].
	^dic.! !

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:13:04'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:13:05'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:13:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:13:10'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:13:10'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:18:01'!
test11
	| store id purchases |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	
	self assert: 3 equals: purchases keys size.
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: (purchases at: testObjects itemSellByTheStore ).
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:23:44' prior: 50879567!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		total := total + aSale total.
		aSale items do: [ :key |
			accumulatedItems at: key withOccurrences: (aSale items occurrencesOf: key).
		].
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:24:01' prior: 50879751!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		total := total + aSale total.
		aSale items do: [ :key |
			accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
		].
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:24:07'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:24:07'!
ERROR!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:24:07'!
FAILURE!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:24:11'!
FAILURE!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:24:11'!
FAILURE!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:25:41' prior: 50879727!
test11
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems at: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:25:49' prior: 50879832!
test11
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:25:50'!
PASSED!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:25:52'!
PASSED!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:25:54'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:25:57'!
ERROR!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:25:57'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:25:57'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:27:18' prior: 50879107!
test10
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := purchases at: 'items'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore).
	! !

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:27:21'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:27:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:27:29'!
PASSED!

!testRun: #StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:27:29'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:28:56'!
test09ListPurchasesOfEmptyCartReturnsTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacadeTest #test09 stamp: 'UC 6/19/2021 17:28:56'!
test09
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:30:17'!
test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !

!methodRemoval: StoreFacadeTest #test09ListPurchasesOfEmptyCartReturnsTotal stamp: 'UC 6/19/2021 17:30:17'!
test09ListPurchasesOfEmptyCartReturnsTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: 'davidYUriel' withPassword: 'xx').
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:30:59'!
test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := purchases at: 'items'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore).
	! !

!methodRemoval: StoreFacadeTest #test10 stamp: 'UC 6/19/2021 17:30:59'!
test10
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := purchases at: 'items'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore).
	!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/19/2021 17:31:12'!
test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !

!methodRemoval: StoreFacadeTest #test11 stamp: 'UC 6/19/2021 17:31:12'!
test11
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'davidYUriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/19/2021 17:31:16'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/19/2021 17:31:16'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:14:56'!
test12
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'davidYUriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:21:07' prior: 50880280!
test12
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'uriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).

	purchases := store listPurchasesFor: 'david' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).	! !

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 17:21:10'!
FAILURE!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 17:21:10'!
FAILURE!
!Cart class methodsFor: 'instance creation' stamp: 'UC 6/20/2021 17:24:29'!
acceptingItemsOf: aCatalog forClient: aClientId 
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog  ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:24:29' prior: 50875469!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero forClient: testObjects validClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice forClient: testObjects validClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:24:29' prior: 50878146!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue forClient: testObjects validClientId).
	^cartId! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:24:29' prior: 50876268!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue forClient: testObjects validClientId! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:24:29' prior: 50875532!
test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	
	salesBook := OrderedCollection new.
	multipleItemCart := Cart acceptingItemsOf: newCatalogue forClient: testObjects validClientId.
	
	multipleItemCart add: testObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	
	cashier := self cashierWith: multipleItemCart 
				registeringOn: salesBook.
	self assert: testObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !

!methodRemoval: Cart class #acceptingItemsOf: stamp: 'UC 6/20/2021 17:24:29'!
acceptingItemsOf: aCatalog
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog  !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:24:58' prior: 50880384!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue forClient: aClientId).
	^cartId! !
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/20/2021 17:25:09' prior: 50880395!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue forClient: self validClientId! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/20/2021 17:25:32'!
validClientId
	^ 'davidYUriel'! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:18' prior: 50878156!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	self setLoginToFail.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithClientId: testObjects validClientId andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/20/2021 17:26:26'!
sampleClientId
	^ 'davidYUriel'! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:26' prior: 50880441!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue forClient: self sampleClientId! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:26' prior: 50880353!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero forClient: testObjects sampleClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice forClient: testObjects sampleClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:26' prior: 50880402!
test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	
	salesBook := OrderedCollection new.
	multipleItemCart := Cart acceptingItemsOf: newCatalogue forClient: testObjects sampleClientId.
	
	multipleItemCart add: testObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	
	cashier := self cashierWith: multipleItemCart 
				registeringOn: salesBook.
	self assert: testObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:26' prior: 50880452!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	self setLoginToFail.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithClientId: testObjects sampleClientId andPassword: 'xx'.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !

!methodRemoval: StoreTestObjects #validClientId stamp: 'UC 6/20/2021 17:26:26'!
validClientId
	^ 'davidYUriel'!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:26:40' prior: 50880532!
test01CreateCartWithInvalidClientIdOrPasswordRaisesError
	| store |
	
	self setLoginToFail.
	store := self sampleStore.
	self 
		should: [ 
			store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
		]
		raise: Error
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText  ]	
	! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/20/2021 17:26:55'!
samplePassword
	
	^ 'xx'! !
!StoreTestObjects methodsFor: 'card' stamp: 'UC 6/20/2021 17:27:14' prior: 50880564!
samplePassword
	
	^ 'EstaEsUnaContrase�aBienDivertid@'! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:27:42' prior: 50878200!
test02ListCreatedCartReturnsEmptyCart
	| store id |
	store := self sampleStore.
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	self assert: (store listCart: id) isEmpty.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:27:47' prior: 50878210!
test03AddedItemToOneCartIsListedById
	| store id |
	store := self sampleStore.
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self assert: 1 equals: (store listCart: id) size.
	self assert: (store listCart: id) includes: testObjects itemSellByTheStore.
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:28:05' prior: 50879534!
test04AddedItemsToMultipleCartsAreListedById
	| store cartId1 cartId2 |
	store := self sampleStore.
	cartId1 := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	cartId2 := store createCartWithClientId: 'david' andPassword: 'yy'.
	
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId1.
	store add: 2 of: testObjects itemSellByTheStore toCart: cartId2.
	
	self assert: 2 equals: (store listCart: cartId1) size.
	self assert: 2 equals: ((store listCart: cartId1) occurrencesOf: testObjects itemSellByTheStore).
	
	self assert: 2 equals: (store listCart: cartId2) size.
	self assert: 2 equals: ((store listCart: cartId2) occurrencesOf: testObjects itemSellByTheStore).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:28:42' prior: 50878595!
test08ListPurchasesForInvalidClientIdOrPasswordRaisesError
	| store |
	self setLoginToFail.
	store := self sampleStore.
	self should: [store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword ] 
		raise: Error 
		withExceptionDo: [:error | self assert: StoreFacade invalidClientIdOrPassword equals: error messageText ]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:29:01' prior: 50880120!
test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:29:22' prior: 50880143!
test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId:testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	purchases := store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword.
	purchasedItems := purchases at: 'items'.
	
	self assert: 2 equals: purchases keys size.
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore).
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:29:45' prior: 50880187!
test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !
!Cart methodsFor: 'initialization' stamp: 'UC 6/20/2021 17:30:47'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId 

	catalog := aCatalog.
	items := Bag new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:30:47' prior: 50880345!
acceptingItemsOf: aCatalog forClient: aClientId 
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId  ! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'UC 6/20/2021 17:30:47'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.!

!classDefinition: #Cart category: 'TusLibros' stamp: 'UC 6/20/2021 17:31:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'UC 6/20/2021 17:31:05' prior: 50880709!
initializeAcceptingItemsOf: aCatalog forClient: aClientId 

	catalog := aCatalog.
	items := Bag new.
	client := aClientId.! !
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 17:31:22'!
client
	^client! !
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 17:31:30' prior: 50880743!
client
	^client! !
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 17:33:05' prior: 50880746!
client
	^client! !
!Sale class methodsFor: 'instance creation' stamp: 'UC 6/20/2021 17:34:44'!
for: aTotal withItems: anItemList forClient: aClient  
	^self new initializeFor: aTotal withItems: anItemList ! !
!CashierPerSale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:34:44' prior: 50878814!
registerEndOfCheckout
	used := true.
	salesbook add: (Sale for: total withItems: cart items forClient: XX).
	cart clear.
	^total.! !

!methodRemoval: Sale class #for:withItems: stamp: 'UC 6/20/2021 17:34:44'!
for: aTotal withItems: anItemList 
	^self new initializeFor: aTotal withItems: anItemList !
!CashierPerSale methodsFor: 'checkout' stamp: 'UC 6/20/2021 17:34:53' prior: 50880759!
registerEndOfCheckout
	used := true.
	salesbook add: (Sale for: total withItems: cart items forClient: cart client).
	cart clear.
	^total.! !
!Sale methodsFor: 'initialization' stamp: 'UC 6/20/2021 17:35:25'!
initializeFor: aTotal withItems: anItemList forClient: aClient  
	total := aTotal.
	items := anItemList.! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:35:25' prior: 50880752!
for: aTotal withItems: anItemList forClient: aClient  
	^self new initializeFor: aTotal withItems: anItemList forClient: aClient ! !

!methodRemoval: Sale #initializeFor:withItems: stamp: 'UC 6/20/2021 17:35:25'!
initializeFor: aTotal withItems: anItemList 
	total := aTotal.
	items := anItemList.!

!classDefinition: #Sale category: 'TusLibros' stamp: 'UC 6/20/2021 17:35:35'!
Object subclass: #Sale
	instanceVariableNames: 'total items client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'UC 6/20/2021 17:35:34' prior: 50880779!
initializeFor: aTotal withItems: anItemList forClient: aClient  
	total := aTotal.
	items := anItemList.
	client := aClient.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/20/2021 17:35:49'!
client
	^client! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:38:29' prior: 50879771!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale client = aClientId) ifTrue: [
			total := total + aSale total.
			aSale items do: [ :key |
				accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
			].
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:38:34'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 17:38:34'!
PASSED!
!Sale methodsFor: 'nil' stamp: 'UC 6/20/2021 17:41:16'!
+ aSale
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:41:24' prior: 50880815!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale client = aClientId) ifTrue: [
			
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:42:58' prior: 50880878!
+ aSale
	|newItems newTotal|
	newTotal := total + aSale total.
	! !
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:46:14' prior: 50880899!
+ aSale
	|newItems newTotal|
	"TO DO: Podemos sumar sales de distinto client?"
	newTotal := total + aSale total.
	newItems := items addAll: aSale items.
	^self class for: newTotal withItems: newItems forClient: 	client.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:46:27' prior: 50880904!
+ aSale
	|newItems newTotal|
	"TO DO: Podemos sumar sales de distinto client?"
	"(aSale client = client) ifFalse: [self error: self class cannotAdd"
	newTotal := total + aSale total.
	newItems := items addAll: aSale items.
	^self class for: newTotal withItems: newItems forClient: 	client.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:50:17' prior: 50880882!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx total |
	dic := Dictionary new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	xx := salesBook sum.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:50:25'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:50:25'!
FAILURE!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 17:50:25'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:52:02' prior: 50880927!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx total |
	dic := Dictionary new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	xx := salesBook sum: [:aSale | (aClientId = aSale client) ifTrue:[aSale] ifFalse:[Sale for: 0 withItems: Bag new forClient: aClientId ]].
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:52:09'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 17:52:09'!
FAILURE!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 17:52:09'!
FAILURE!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:56:19' prior: 50880984!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx total |
	dic := Dictionary new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	xx := salesBook sum.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:05:42' prior: 50881045!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx total emptyBehaviour |
	dic := Dictionary new.
	total := 0.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	
	(salesBook size = 0) ifTrue: emptyBehaviour.
	xx := salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | ^aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:05:55' prior: 50881059!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	
	(salesBook size = 0) ifTrue: emptyBehaviour.
	xx := salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | ^aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:06:48' prior: 50881079!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	
	(salesBook size = 0) ifTrue: emptyBehaviour.
	salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | xx := aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:07:07' prior: 50881098!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | xx := aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:11:01'!
groupByClientIn: aSalesBook
	|newItems newTotal|
	"TO DO: Podemos sumar sales de distinto client?"
	"(aSale client = client) ifFalse: [self error: self class cannotAdd"
	newTotal := 0.
	newItems := Bag new.
	aSalesBook do: [ :aSale |
		(aSale client = client) ifTrue: [
			newTotal := newTotal + aSale total.
			newItems := newItems addAll: aSale items.
		]
	].
	^self class for: newTotal withItems: newItems forClient: 	client.! !

!methodRemoval: Sale #+ stamp: 'UC 6/20/2021 18:11:05'!
+ aSale
	|newItems newTotal|
	"TO DO: Podemos sumar sales de distinto client?"
	"(aSale client = client) ifFalse: [self error: self class cannotAdd"
	newTotal := total + aSale total.
	newItems := items addAll: aSale items.
	^self class for: newTotal withItems: newItems forClient: 	client.!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:11:12'!
FAILURE!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:11:12'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:11:12'!
FAILURE!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:12:37' prior: 50880679!
test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:12:38'!
FAILURE!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:12:57' prior: 50881209!
test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword.
	purchasedItems := (purchases at: 'items').
	self assert: 200 equals: (purchases at: 'total').
	self assert: 2 equals: purchasedItems size.
	self assert: 2 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).
	! !

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:18:44'!
FAILURE!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:18:44'!
FAILURE!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:20:32'!
FAILURE!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:20:32'!
FAILURE!

(self findCartById: aCartId)!

(self findCartById: aCartId) !

(self findCartById: aCartId)!

anAmount!
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:27:08' prior: 50881134!
groupByClientIn: aSalesBook
	|newItems newTotal|
	"TO DO: Podemos sumar sales de distinto client?"
	"(aSale client = client) ifFalse: [self error: self class cannotAdd"
	newTotal := 0.
	newItems := Bag new.
	aSalesBook do: [ :aSale |
		(aSale client = client) ifTrue: [
			newTotal := newTotal + aSale total.
			newItems addAll: aSale items.
		]
	].
	^self class for: newTotal withItems: newItems forClient: 	client.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:27:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:27:15'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:27:15'!
PASSED!
!Sale methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:27:45' prior: 50881295!
groupByClientIn: aSalesBook
	|newItems newTotal|
	newTotal := 0.
	newItems := Bag new.
	aSalesBook do: [ :aSale |
		(aSale client = client) ifTrue: [
			newTotal := newTotal + aSale total.
			newItems addAll: aSale items.
		]
	].
	^self class for: newTotal withItems: newItems forClient: 	client.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:30:21'!
test13
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'uriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).

	purchases := store listPurchasesFor: 'david' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:30:46'!
sampleStoreWithDate: aDate
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:31:01' prior: 50878756!
sampleStore
	^ self sampleStoreWithDate: Date today! !

	Date today!

	Date now!

	Date dateAndTimeNow !

	Date dateAndTimeNow !

	Date dateAndTimeNow minutes!

	Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow!

	Date dateAndTimeNow - Date dateAndTimeNow > 30 minutes!

	GregorianDateTime timeOfDay !

	GregorianDateTime new timeOfDay !

	GregorianDateTime now !

	GregorianDateTime now timeOfDay !

	GregorianDateTime now  !

	GregorianDateTime now  + 30*minute!

GregorianDateTime now distanceTo: GregorianDateTime yesterday!

	GregorianDateTime now distanceTo: GregorianDateTime now !

	GregorianDateTime now distanceTo: GregorianDateTime theBeginningOfTime !

36382688580646112684438326141/86400000 days minutes!

( -36382688580646112684438326141/86400000 days)!

	(GregorianDateTime now distanceTo: GregorianDateTime theBeginningOfTime) * minute!

	(GregorianDateTime now distanceTo: GregorianDateTime theBeginningOfTime) * minute!

	(GregorianDateTime now distanceTo: GregorianDateTime theBeginningOfTime) minute!

	1*day!

	((1*day) to: minute)!

	((1*day) convertTo: minute)!

	(GregorianDateTime now distanceTo: GregorianDateTime theBeginningOfTime) convertTo: minute.!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:43:08' prior: 50881484!
test13
	| store id purchases purchasedItems |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'uriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).

	purchases := store listPurchasesFor: 'david' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:43:29' prior: 50881526!
sampleStore
	^ self sampleStoreWithDate: GregorianDateTime! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:45:43' prior: 50881574!
test13
	| store id |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:46:34' prior: 50881615!
test13
	| store id |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
			
		]
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:47:45' prior: 50881631!
test13
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:48:09'!
sampleStoreWithClock: aDate
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:48:09' prior: 50881609!
sampleStore
	^ self sampleStoreWithClock: GregorianDateTime! !

!methodRemoval: StoreFacadeTest #sampleStoreWithDate: stamp: 'UC 6/20/2021 18:48:09'!
sampleStoreWithDate: aDate
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:48:16' prior: 50881669!
sampleStoreWithClock: aClock
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk! !
!StoreFacade class methodsFor: 'instance creation' stamp: 'UC 6/20/2021 18:49:04'!
with: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock  
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:49:04' prior: 50881690!
sampleStoreWithClock: aClock
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk clock: GregorianDateTime! !

!methodRemoval: StoreFacade class #with:catalogue:merchantProcessor: stamp: 'UC 6/20/2021 18:49:04'!
with: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor 
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor.!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:49:14' prior: 50881708!
sampleStoreWithClock: aClock
	^ StoreFacade with: self catalogue: testObjects defaultCatalogue merchantProcessor: MPSimulator answerWithOk clock: aClock! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:49:43'!
initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock  
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.! !
!StoreFacade class methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:49:43' prior: 50881698!
with: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock  
	^self new initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock.! !

!methodRemoval: StoreFacade #initializeWith:catalogue:merchantProcessor: stamp: 'UC 6/20/2021 18:49:43'!
initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor 
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.!

!classDefinition: #StoreFacade category: 'TusLibros' stamp: 'UC 6/20/2021 18:49:59'!
Object subclass: #StoreFacade
	instanceVariableNames: 'clientAuthenticator catalogue carts cartId salesBook merchantProcessor clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:49:57' prior: 50881734!
initializeWith: aClientAuthenticator catalogue: aCatalogue merchantProcessor: aMerchantProcessor clock: aClock  
	clientAuthenticator := aClientAuthenticator.
	catalogue := aCatalogue.
	cartId := 0.
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	merchantProcessor := MPSimulator answerWithOk.
	clock := aClock.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:50:23' prior: 50878781!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock now
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:50:26'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:50:26'!
ERROR!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:50:26'!
ERROR!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:50:26'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:50:26'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:50:38'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:51:44' prior: 50881793!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:51:45'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:51:45'!
ERROR!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:51:45'!
ERROR!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:51:45'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:51:45'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:51:50'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:53:15' prior: 50881677!
sampleStore
	^ self sampleStoreWithClock: DateAndTime ! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:53:18'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:53:18'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:53:18'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:54:01' prior: 50881928!
sampleStore
	^ self sampleStoreWithClock: DateAndTime ! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:54:56' prior: 50881860!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |

	cart := self findCartById: aCartId.
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:55:43' prior: 50880431!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue forClient: aClientId).
	^cartId! !
!Cart class methodsFor: 'instance creation' stamp: 'UC 6/20/2021 18:56:49'!
acceptingItemsOf: aCatalog forClient: aClientId createdOn: aCreationDate  
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId  ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:56:49' prior: 50880478!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero forClient: testObjects sampleClientId createdOn: clock today. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice forClient: testObjects sampleClientId createdOn: clock today. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:56:49' prior: 50882004!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue forClient: aClientId createdOn: clock today).
	^cartId! !
!CashierPerSaleTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:56:49' prior: 50880509!
test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	
	salesBook := OrderedCollection new.
	multipleItemCart := Cart acceptingItemsOf: newCatalogue forClient: testObjects sampleClientId createdOn: clock today.
	
	multipleItemCart add: testObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	
	cashier := self cashierWith: multipleItemCart 
				registeringOn: salesBook.
	self assert: testObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!StoreTestObjects methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:56:49' prior: 50880471!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue forClient: self sampleClientId createdOn: clock today! !

!methodRemoval: Cart class #acceptingItemsOf:forClient: stamp: 'UC 6/20/2021 18:56:49'!
acceptingItemsOf: aCatalog forClient: aClientId 
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId  !
!StoreTestObjects methodsFor: 'cart' stamp: 'UC 6/20/2021 18:57:20' prior: 50882091!
emptyCartWithDefaultCatalogue
	^Cart acceptingItemsOf: self defaultCatalogue forClient: self sampleClientId createdOn: DateAndTime today! !
!CashierPerSaleTest methodsFor: 'tests' stamp: 'UC 6/20/2021 18:57:39' prior: 50882067!
test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal

	| cashier multipleItemCart salesBook newCatalogue |

	newCatalogue :=  testObjects defaultCatalogue. 
	newCatalogue at: 'anotherBook' put: 200.
	
	salesBook := OrderedCollection new.
	multipleItemCart := Cart acceptingItemsOf: newCatalogue forClient: testObjects sampleClientId createdOn: DateAndTime today.
	
	multipleItemCart add: testObjects itemSellByTheStore.
	2 timesRepeat: [multipleItemCart add: 'anotherBook'].
	
	cashier := self cashierWith: multipleItemCart 
				registeringOn: salesBook.
	self assert: testObjects itemSellByTheStorePrice + 200 + 200 equals: cashier checkout.
! !
!CartTest methodsFor: 'tests' stamp: 'UC 6/20/2021 18:58:01' prior: 50882024!
test10CartCanotUseCatalogueWIthNonPositivePrices

	| cart 	 catalogueWithZero catalogueWithNegativePrice |
	catalogueWithZero:=  Dictionary new.
	catalogueWithZero at: 'validBook' put: 0.

	self 
		should: [ cart := Cart  acceptingItemsOf:  catalogueWithZero forClient: testObjects sampleClientId createdOn: DateAndTime today. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].
		
	catalogueWithNegativePrice:=  Dictionary new.
	catalogueWithNegativePrice at: 'validBook' put: -1.

	self 
		should: [ cart := Cart  acceptingItemsOf: catalogueWithNegativePrice forClient: testObjects sampleClientId createdOn: DateAndTime today. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart invalidCatalogueMessage equals: anError messageText.
			self assert: cart isNil].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 18:58:11'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 18:58:13'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 18:58:16'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 18:58:16'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 18:58:16'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 18:58:16'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:58:20'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 18:58:20'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 18:58:21'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:58:21'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 18:58:21'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'UC 6/20/2021 18:59:02'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId createdOn: aCreationDate  

	catalog := aCatalog.
	items := Bag new.
	client := aClientId.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:59:03' prior: 50882014!
acceptingItemsOf: aCatalog forClient: aClientId createdOn: aCreationDate  
	self assertCatalogueHasOnlyPositivePrices: aCatalog.
	^self new initializeAcceptingItemsOf: aCatalog forClient: aClientId createdOn: aCreationDate  ! !

!methodRemoval: Cart #initializeAcceptingItemsOf:forClient: stamp: 'UC 6/20/2021 18:59:03'!
initializeAcceptingItemsOf: aCatalog forClient: aClientId 

	catalog := aCatalog.
	items := Bag new.
	client := aClientId.!

!classDefinition: #Cart category: 'TusLibros' stamp: 'UC 6/20/2021 18:59:23'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items client creationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'UC 6/20/2021 18:59:20' prior: 50882292!
initializeAcceptingItemsOf: aCatalog forClient: aClientId createdOn: aCreationDate  

	catalog := aCatalog.
	items := Bag new.
	client := aClientId.
	creationDate := aCreationDate.! !
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 18:59:37'!
creationDate
	^creationDate ! !
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:00:47'!
isExpiredOn: aDateTime
	^((creationDate distanceTo: aDateTime) convertTo: minute) > 30*minute! !

!methodRemoval: Cart #creationDate stamp: 'UC 6/20/2021 19:00:50'!
creationDate
	^creationDate !
!CashierPerSale methodsFor: 'checkout' stamp: 'UC 6/20/2021 19:01:34' prior: 50875978!
checkout
	self assertHasNotBeenUsedBefore.
	
	total := cart total.
	merchantProcessor charge: total on: creditCard.
	
	^self registerEndOfCheckout.
! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:02:43' prior: 50881986!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	
	cart := self findCartById: aCartId.
	
	(cart isExpiredOn: clock today) ifTrue: [ self error: self class ].
	
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !
!StoreFacade class methodsFor: 'error messages' stamp: 'UC 6/20/2021 19:03:15'!
cannotCheckoutCartAfter30minutes
	^'No se puede facturar un carrito despu�s de 30 minutos de crearlo'! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:04:02' prior: 50882352!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	
	cart := self findCartById: aCartId.
	
	(cart isExpiredOn: clock today) ifTrue: [ self error: self class cannotCheckoutCartAfter30minutes ].
	
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:04:07'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:04:07'!
ERROR!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:04:07'!
ERROR!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:04:07'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:04:07'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:04:10'!
ERROR!

self distanceTo: 1!

	GregorianDateTime today!

	GregorianDateTime now!

	GregorianDateTime now asMonth !

	GregorianDateTime now asMonthOfYear!

GregorianDateTime now monthOfYear!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:08:10' prior: 50881981!
sampleStore
	^ self sampleStoreWithClock: GregorianDateTime ! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/20/2021 19:14:09' prior: 50876281!
expiredDate
	^GregorianDateTime theEndOfTime.
	"Date fromSeconds: (Date today secondsSinceSqueakEpoch  + 100000000)"! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 19:14:43'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:14:45'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 19:14:48'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 19:14:48'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 19:14:48'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 19:14:48'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:15:05' prior: 50882335!
isExpiredOn: aDateTime
	^((aDateTime distanceTo: creationDate) convertTo: minute) > 30*minute! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:15:56'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:15:56'!
ERROR!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:16:02'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:16:25' prior: 50882056!
createCartWithClientId: aClientId andPassword: aPassword
	clientAuthenticator login: aClientId with: aPassword.
	cartId := cartId + 1.
	carts at: cartId put: (Cart acceptingItemsOf: catalogue forClient: aClientId createdOn: clock now).
	^cartId! !

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:16:27'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:16:29'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:16:30'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:16:30'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:16:38' prior: 50882379!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	
	cart := self findCartById: aCartId.
	
	(cart isExpiredOn: clock now) ifTrue: [ self error: self class cannotCheckoutCartAfter30minutes ].
	
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock today
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:16:40'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:16:58'!
ERROR!

((aDateTime distanceTo: creationDate) convertTo: minute)!

((aDateTime distanceTo: creationDate) convertTo: minute) > 30 minutes!

((aDateTime distanceTo: creationDate) convertTo: minute) > 30*minute!

((aDateTime distanceTo: creationDate) convertTo: minute)!

1*minute > 2*minute!
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:20:01' prior: 50882542!
isExpiredOn: aDateTime
	^((aDateTime distanceTo: creationDate) convertTo: minute) > (30*minute)! !

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:20:02'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:20:06'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:20:14' prior: 50882623!
checkoutCart: aCartId withCardNumber: aCardNumber expiring: anExpirationMonthOfYear ownedBy: anOwnerName
	| cart creditCard |
	
	cart := self findCartById: aCartId.
	
	(cart isExpiredOn: clock now) ifTrue: [ self error: self class cannotCheckoutCartAfter30minutes ].
	
	creditCard := CreditCard 
		withName:  anOwnerName 
		withNumber:  aCardNumber 
		withExpirationDate: anExpirationMonthOfYear.
	(CashierPerSale 
			forCheckoutWith:  cart
			chargingTo:  creditCard
			onDate:  clock now
			registeringOn:  salesBook
			with: merchantProcessor) checkout.
	
	
	! !

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:20:15'!
ERROR!
!CashierPerSale class methodsFor: 'assertions' stamp: 'UC 6/20/2021 19:20:51' prior: 50876033!
assertCardDateIsNotExpired: aCard onDate: aDate
	| monthOfYear |
	monthOfYear:= aDate monthOfYear.
	(aCard isExpiredOn: monthOfYear) ifTrue: [self error: self cannotCheckoutWithExpiredCard]! !

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:20:52'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:20:54'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:20:55'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:20:55'!
ERROR!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:21:38'!
now
	^GregorianDateTime theBeginningOfTime.
	
	! !

!classDefinition: #StoreFacadeTest category: 'TusLibros' stamp: 'UC 6/20/2021 19:23:54'!
TestCase subclass: #StoreFacadeTest
	instanceVariableNames: 'loginWithSuccess testObjects isTheFuture'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:23:36' prior: 50882723!
now	
	^isTheFuture ifTrue: [GregorianDateTime theEndOfTime] ifFalse:[GregorianDateTime now].
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:24:08' prior: 50877120 overrides: 16927572!
setUp
	loginWithSuccess := true.
	isTheFuture := false.
		testObjects := StoreTestObjects new.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:24:10' prior: 50882743 overrides: 16927572!
setUp
	loginWithSuccess := true.
	isTheFuture := false.
	testObjects := StoreTestObjects new.! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:24:29' prior: 50881647!
test13
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	isTheFuture := true.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:24:32'!
FAILURE!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:24:32'!
FAILURE!

self now!

self now!

((aDateTime distanceTo: creationDate) convertTo: minute) > (30*minute)!

((aDateTime distanceTo: creationDate) convertTo: minute)!

((creationDate distanceTo: aDateTime) convertTo: minute) -1212756286021532836718947247/2000 minutes !

((creationDate distanceTo: aDateTime) convertTo: minute)!
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:28:19' prior: 50882661!
isExpiredOn: aDateTime
	^((creationDate distanceTo: aDateTime) convertTo: minute) > (30*minute)! !

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:28:21'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:28:24'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:28:27'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:28:31'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:28:31'!
FAILURE!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:28:31'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:28:31'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:28:31'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:28:31'!
ERROR!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:28:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:28:34'!
ERROR!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:28:34'!
FAILURE!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:28:34'!
ERROR!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:28:34'!
ERROR!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:28:34'!
ERROR!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:28:34'!
ERROR!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:28:34'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:28:38'!
ERROR!
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/20/2021 19:30:11' prior: 50875744!
cashierWith: aCart registeringOn: aSalesbook with: aMerchantProcessor 
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: testObjects validCreditCard
		onDate: GregorianDateTime now
		registeringOn: aSalesbook 
		with: aMerchantProcessor 
		! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/20/2021 19:30:15' prior: 50875734!
cashierWith: aCart registeringOn: aSalesbook
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: testObjects validCreditCard 
		onDate: GregorianDateTime now
		registeringOn: aSalesbook 
		with: MPSimulator answerWithOk! !
!CashierPerSaleTest methodsFor: 'support' stamp: 'UC 6/20/2021 19:30:19' prior: 50875723!
cashierWith: aCart chargingTo: aCreditCard registeringOn: aSalesbook with: aMerchantProcessor 
	^ CashierPerSale 
		forCheckoutWith: aCart 
		chargingTo: aCreditCard 
		onDate: GregorianDateTime now
		registeringOn: aSalesbook 
		with: aMerchantProcessor ! !

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:30:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:30:24'!
PASSED!

!testRun: #StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:30:24'!
PASSED!
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:31:14'!
setClockToFutureDate

	^ isTheFuture := true! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:31:14' prior: 50882757!
test13
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !
!StoreFacadeTest methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:31:17' prior: 50883278!
test13
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/20/2021 19:33:07'!
test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'uriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).

	purchases := store listPurchasesFor: 'david' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).	! !

!methodRemoval: StoreFacadeTest #test12 stamp: 'UC 6/20/2021 19:33:07'!
test12
	| store id purchases purchasedItems |
	store := self sampleStore.
	id := store createCartWithClientId: 'uriel' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	self sampleCheckoutIn: store for: id.
	
	purchases := store listPurchasesFor: 'uriel' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).

	purchases := store listPurchasesFor: 'david' withPassword: 'xx'.
	purchasedItems := (purchases at: 'items').
	self assert: 100 equals: (purchases at: 'total').
	self assert: 1 equals: purchasedItems size.
	self assert: 1 equals: (purchasedItems occurrencesOf: testObjects itemSellByTheStore ).	!
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/20/2021 19:33:55'!
test13CartExpiresAfter30Minutes
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !

!methodRemoval: StoreFacadeTest #test13 stamp: 'UC 6/20/2021 19:33:55'!
test13
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	!
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/20/2021 19:34:29'!
test13CheckoutOfExpiredCartRaisesError
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !

!methodRemoval: StoreFacadeTest #test13CartExpiresAfter30Minutes stamp: 'UC 6/20/2021 19:34:29'!
test13CartExpiresAfter30Minutes
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	!
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:34:50' prior: 50882794!
isExpiredOn: aDateTime
	^((creationDate distanceTo: aDateTime) convertTo: minute) > (35*minute)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:34:54'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:34:54'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'UC 6/20/2021 19:35:00' prior: 50883485!
isExpiredOn: aDateTime
	^((creationDate distanceTo: aDateTime) convertTo: minute) > (30*minute)! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/20/2021 19:40:44' prior: 50882461!
expiredDate
	^GregorianDateTime next: 3*day.
	"Date fromSeconds: (Date today secondsSinceSqueakEpoch  + 100000000)"! !
!StoreTestObjects methodsFor: 'dates' stamp: 'UC 6/20/2021 19:41:10' prior: 50883620!
expiredDate
	^GregorianDateTime next: 3*month.
	"Date fromSeconds: (Date today secondsSinceSqueakEpoch  + 100000000)"! !
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:41:26' prior: 50882736!
now	
	^isTheFuture ifTrue: [GregorianDateTime next: 30*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:29'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:29'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:29'!
FAILURE!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:41:39' prior: 50883634!
now	
	^isTheFuture ifTrue: [GregorianDateTime next: 31*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:42'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:42'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:42'!
FAILURE!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:41:46' prior: 50883693!
now	
	^isTheFuture ifTrue: [GregorianDateTime next: 35*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:47'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:47'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:47'!
FAILURE!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:41:52' prior: 50883752!
now	
	^isTheFuture ifTrue: [GregorianDateTime next: 30*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:41:55'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:55'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:41:55'!
FAILURE!

self now!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:42:25' prior: 50883811!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: 30*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:27'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:42:27'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:42:27'!
FAILURE!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:42:40' prior: 50883870!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: 31*minute] ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:42:42'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:42:42'!
PASSED!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:42:45' prior: 50883929!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: 30*minute] ifFalse:[GregorianDateTime now].
	
	! !
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:42:57' prior: 50883984!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: 31*minute] ifFalse:[GregorianDateTime now].
	
	! !
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:43:11' prior: 50883991!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: 30*minute + 1*second]ifFalse:[GregorianDateTime now].
	
	! !
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:43:21' prior: 50883998!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: (30*minute) + (1*second)]ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:23'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:43:23'!
PASSED!
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:43:34' prior: 50884005!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: (30*minute) + (1*millisecond )]ifFalse:[GregorianDateTime now].
	
	! !
!StoreFacadeTest methodsFor: 'stubbing' stamp: 'UC 6/20/2021 19:43:35' prior: 50884061!
now	
	^isTheFuture ifTrue: [GregorianDateTime now next: (30*minute) + (1*millisecond)]ifFalse:[GregorianDateTime now].
	
	! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/20/2021 19:43:36'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/20/2021 19:43:36'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:44:33' prior: 50881117!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedSales emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | accumulatedSales := aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: accumulatedSales total.
	dic at: 'items' put: accumulatedSales items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 19:53:18' prior: 50884124!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedSales emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | accumulatedSales := aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: accumulatedSales total.
	dic at: 'items' put: accumulatedSales items.
	^dic.! !

----QUIT----(22 June 2021 15:54:54) CuisUniversity-4532.image priorSource: 17453456!

----STARTUP---- (22 June 2021 21:29:16) as /Users/urichami/Facu/ing1/inge1-1c-2021/Cuis/CuisUniversity-4532.image!


!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:29:48'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/22/2021 21:29:51'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:29:51'!
PASSED!
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:33:27'!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:34:36' prior: 50884220!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self sampleCheckoutIn: store for: id.
		
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !

!methodRemoval: StoreFacadeTest #test14 stamp: 'UC 6/22/2021 21:42:55'!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self sampleCheckoutIn: store for: id.
		
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:05:55' prior: 50884143!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	
	(salesBook size = 0) ifTrue: emptyBehaviour.
	xx := salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | ^aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:38:29' prior: 50884279!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale client = aClientId) ifTrue: [
			total := total + aSale total.
			aSale items do: [ :key |
				accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
			].
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!methodRemoval: Sale #groupByClientIn: stamp: 'UC 6/22/2021 21:45:05'!
groupByClientIn: aSalesBook
	|newItems newTotal|
	newTotal := 0.
	newItems := Bag new.
	aSalesBook do: [ :aSale |
		(aSale client = client) ifTrue: [
			newTotal := newTotal + aSale total.
			newItems addAll: aSale items.
		]
	].
	^self class for: newTotal withItems: newItems forClient: 	client.!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:45:48' prior: 50884298!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := total + aSale total.
			aSale items do: [ :key |
				accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
			].
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:46:06'!
isForClient: aClientId
	^client = aClientId ! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:47:09' prior: 50884331!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := total + aSale total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:47:44'!
addAllItemsTo: aBag
	^aBag addAll: items.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:48:11'!
addTotalTo: aNumber
	^aNumber + total.
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:49:10' prior: 50884357!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:49:28' prior: 50884384!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	clientAuthenticator login: aClientId with: aPassword.
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:49:54'!
FAILURE!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/22/2021 21:49:54'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:49:54'!
FAILURE!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:49:58'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:50:32' prior: 50880640!
test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 2 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	self assert: 0 equals: (purchases at: 'items') size.! !

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:50:33'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:50:34'!
FAILURE!
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:50:51' prior: 50883438!
test13CheckoutOfExpiredCartRaisesError
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 2 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	self assert: 0 equals: (purchases at: 'items') size.
	
	! !

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:50:53'!
FAILURE!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:50:56'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:50:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/22/2021 21:51:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/22/2021 21:51:02'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/22/2021 21:51:02'!
PASSED!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:52:03' prior: 50884401!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	clientAuthenticator login: aClientId with: aPassword.
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

Object subclass: #ListPurchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/22/2021 21:53:50'!
Object subclass: #ListPurchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:54:39' prior: 50884697!
listPurchasesFor: aClientId withPassword: aPassword 
	| accumulatedItems |
	clientAuthenticator login: aClientId with: aPassword.
	^ListPurchases for: aClientId with: salesBook.! !

----STARTUP---- (23 June 2021 17:59:27) as /Users/urichami/Facu/ing1/inge1-1c-2021/Cuis/CuisUniversity-4532.image!

!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:33:27'!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:34:36' prior: 50884737!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self sampleCheckoutIn: store for: id.
		
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	! !

!methodRemoval: StoreFacadeTest #test14 stamp: 'UC 6/23/2021 17:59:51'!
test14
	| store id purchases |
	store := self sampleStore.
	
	id := store createCartWithClientId: testObjects sampleClientId andPassword: testObjects samplePassword .
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self sampleCheckoutIn: store for: id.
		
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 1 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	
	!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 18:05:55' prior: 50884143!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic xx emptyBehaviour |
	dic := Dictionary new.
	emptyBehaviour := [
		dic at: 'total' put: 0.
		^dic.
	].
	clientAuthenticator login: aClientId with: aPassword.
	
	(salesBook size = 0) ifTrue: emptyBehaviour.
	xx := salesBook detect:[:aSale | aSale client = aClientId ] 
			ifFound:[:aFoundSale | ^aFoundSale groupByClientIn: salesBook ] 
			ifNone: emptyBehaviour.
	dic at: 'total' put: xx total.
	dic at: 'items' put: xx items.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/20/2021 17:38:29' prior: 50884796!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale client = aClientId) ifTrue: [
			total := total + aSale total.
			aSale items do: [ :key |
				accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
			].
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!methodRemoval: Sale #groupByClientIn: stamp: 'UC 6/23/2021 17:59:51'!
groupByClientIn: aSalesBook
	|newItems newTotal|
	newTotal := 0.
	newItems := Bag new.
	aSalesBook do: [ :aSale |
		(aSale client = client) ifTrue: [
			newTotal := newTotal + aSale total.
			newItems addAll: aSale items.
		]
	].
	^self class for: newTotal withItems: newItems forClient: 	client.!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:45:48' prior: 50884815!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := total + aSale total.
			aSale items do: [ :key |
				accumulatedItems add: key withOccurrences: (aSale items occurrencesOf: key).
			].
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:46:06'!
isForClient: aClientId
	^client = aClientId ! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:47:09' prior: 50884848!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	(salesBook size = 0) ifTrue: [
		dic at: 'total' put: 0.
		^dic.
	].
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := total + aSale total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:47:44'!
addAllItemsTo: aBag
	^aBag addAll: items.! !
!Sale methodsFor: 'accessing' stamp: 'UC 6/22/2021 21:48:11'!
addTotalTo: aNumber
	^aNumber + total.
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:49:10' prior: 50884874!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	clientAuthenticator login: aClientId with: aPassword.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:49:28' prior: 50884901!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	clientAuthenticator login: aClientId with: aPassword.
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:50:32' prior: 50880640!
test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal
	| store purchases |
	store := self sampleStore.
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 2 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	self assert: 0 equals: (purchases at: 'items') size.! !
!StoreFacadeTest methodsFor: 'tests' stamp: 'UC 6/22/2021 21:50:51' prior: 50883438!
test13CheckoutOfExpiredCartRaisesError
	| store id purchases |
	store := self sampleStoreWithClock: self.
	
	id := store createCartWithClientId: 'david' andPassword: 'xx'.
	store add: 1 of: testObjects itemSellByTheStore toCart: id.
	
	self setClockToFutureDate.
	self should: [self sampleCheckoutIn: store for: id.] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: StoreFacade cannotCheckoutCartAfter30minutes equals: error messageText.
		].
	purchases := (store listPurchasesFor: testObjects sampleClientId withPassword: testObjects samplePassword).
	self assert: 2 equals: purchases keys size.
	self assert: 0 equals: (purchases at: 'total').
	self assert: 0 equals: (purchases at: 'items') size.
	
	! !
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:52:03' prior: 50884918!
listPurchasesFor: aClientId withPassword: aPassword 
	| dic accumulatedItems total |
	clientAuthenticator login: aClientId with: aPassword.
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: aClientId) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 17:59:52'!
Object subclass: #ListPurchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 17:59:52'!
Object subclass: #ListPurchases
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/22/2021 21:54:39' prior: 50884976!
listPurchasesFor: aClientId withPassword: aPassword 
	| accumulatedItems |
	clientAuthenticator login: aClientId with: aPassword.
	^ListPurchases for: aClientId with: salesBook.! !

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:03:40'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:03:41'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ListPurchases methodsFor: 'nil' stamp: 'UC 6/23/2021 18:03:39'!
compute
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases class methodsFor: 'nil' stamp: 'UC 6/23/2021 18:05:15'!
for: aClientId with: aSalesBook
	^self new initializeFor: aClientId with: aSalesBook! !
!ListPurchases methodsFor: 'nil' stamp: 'UC 6/23/2021 18:05:43'!
initializeFor: aClientId with: aSalesBook
	client := aClientId.
	salesBook := aSalesBook.! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:05:51'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:05:51'!
ERROR!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:05:51'!
ERROR!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:05:51'!
ERROR!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/23/2021 18:05:51'!
ERROR!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/23/2021 18:05:51'!
ERROR!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:05:53'!
ERROR!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:06:04'!
ERROR!
!StoreFacade methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:06:19' prior: 50885007!
listPurchasesFor: aClientId withPassword: aPassword 
	
	clientAuthenticator login: aClientId with: aPassword.
	^(ListPurchases for: aClientId with: salesBook) compute! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/23/2021 18:06:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/23/2021 18:06:26'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/23/2021 18:06:26'!
PASSED!
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:07:08' prior: 50885030!
compute
	| dic accumulatedItems total |
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:07:12' prior: 50885292!
compute
	| dic2 accumulatedItems total |
	dic2 := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic2 at: 'total' put: total.
	dic2 at: 'items' put: accumulatedItems.
	^dic2.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:07:18' prior: 50885306!
compute
	| dic2 accumulatedItems2 total |
	dic2 := Dictionary new.
	accumulatedItems2 := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems2.
		]
	].
	dic2 at: 'total' put: total.
	dic2 at: 'items' put: accumulatedItems2.
	^dic2.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:07:31' prior: 50885320!
compute
	| dic2 accumulatedItems2 total2 |
	dic2 := Dictionary new.
	accumulatedItems2 := Bag new.
	total2 := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total2 := aSale addTotalTo: total2.
			aSale addAllItemsTo: accumulatedItems2.
		]
	].
	dic2 at: 'total' put: total2.
	dic2 at: 'items' put: accumulatedItems2.
	^dic2.! !

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:07:56'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook client dic'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:07:57'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook client dic accumulatedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:07:59'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook client dic accumulatedItems total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:07:55' prior: 50885334!
compute
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:08:22' prior: 50885372!
compute
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		(aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:08:32'!
accumulateSale: aSale

	^ (aSale isForClient: client) ifTrue: [
			total := aSale addTotalTo: total.
			aSale addAllItemsTo: accumulatedItems.
		]! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:08:32' prior: 50885385!
compute
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:08:40' prior: 50885406!
compute
	dic := Dictionary new.
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].

	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:09:03' prior: 50885416!
compute
	
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].

	dic := Dictionary new.
	dic at: 'total' put: total.
	dic at: 'items' put: accumulatedItems.
	^dic.! !

!classDefinition: #ListPurchases category: 'TusLibros' stamp: 'UC 6/23/2021 18:09:28'!
Object subclass: #ListPurchases
	instanceVariableNames: 'salesBook client purchases accumulatedItems total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:09:28' prior: 50885426!
compute
	
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].

	purchases := Dictionary new.
	purchases at: 'total' put: total.
	purchases at: 'items' put: accumulatedItems.
	^purchases.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:09:45'!
createPurchasesDictionary

	purchases := Dictionary new.
	purchases at: 'total' put: total.
	purchases at: 'items' put: accumulatedItems! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:09:45' prior: 50885445!
compute
	
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].

	self createPurchasesDictionary.
	^purchases.! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:10:07' prior: 50885464!
compute
	
	accumulatedItems := Bag new.
	total := 0.
	
	salesBook do: [:aSale |
		self accumulateSale: aSale
	].

	^self createPurchasesDictionary.
	! !
!ListPurchases methodsFor: 'as yet unclassified' stamp: 'UC 6/23/2021 18:10:14' prior: 50885456!
createPurchasesDictionary

	purchases := Dictionary new.
	purchases at: 'total' put: total.
	purchases at: 'items' put: accumulatedItems.
	^purchases! !

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/23/2021 18:10:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test09EmptyCartTotalIsZero stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CartTest #test10CartCanotUseCatalogueWIthNonPositivePrices stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test01CreatingACashierPerSaleWithEmptyCartRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test02CheckOutMultipleItemsWithNonExpiredCardReturnsTotal stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test03CreatingACashierPerSaleWithExpiredCreditCardRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test04CheckOutClearsCart stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test05CheckOutRegistersASale stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test06CheckingOutWIthCashierPerSaleTwiceRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CashierPerSaleTest #test07CheckOutWithFailingMerchantProcessorLeavesUntouchedSalesbookAndFullCart stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CreditCardTest #test01CreatingACardWithANameLongerThan30CharactersRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CreditCardTest #test02CreatingACardWithEmptyNameRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CreditCardTest #test03CreatingACardWithANumberDifferentThan16DigitsRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #CreditCardTest #test04CreatingACardWithValidNameAndValidNumberAndValidDateIsCorrect stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test01CreateCartWithInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test02ListCreatedCartReturnsEmptyCart stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test03AddedItemToOneCartIsListedById stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test04AddedItemsToMultipleCartsAreListedById stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test05ListCartForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test06AddItemForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test07CheckoutForAbsentCartIdRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test08ListPurchasesForInvalidClientIdOrPasswordRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test09ListPurchasesOfClientWithoutPurchasesReturnsValidTotal stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test10ListPurchasesOfClientWithOnePurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test11ListPurchasesOfClientWithManyPurchaseReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test12ListPurchasesOfClientInSalesbookWithManyClientsReturnsTotalAndItems stamp: 'UC 6/23/2021 18:10:26'!
PASSED!

!testRun: #StoreFacadeTest #test13CheckoutOfExpiredCartRaisesError stamp: 'UC 6/23/2021 18:10:26'!
PASSED!
Merchant Procesor Simulator!
Simulador del Merchant Procesor!