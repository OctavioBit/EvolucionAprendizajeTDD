

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (17 May 2021 13:12:10) as D:\Facultad\2021-1C-IS1\CuisUniversity_win64\MarsRoverMioV2\windows64\CuisUniversity-4532.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'GR 5/17/2021 13:13:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 5/17/2021 13:14:24'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'GR 5/17/2021 13:14:19'!
test01
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	
	self assert: '0 0' equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:14:27'!
ERROR!
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 13:14:42'!
inX: aSmallInteger inY: aSmallInteger2 orientedTo: aCharacter 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 13:15:08' prior: 50859362!
inX: aSmallInteger inY: aSmallInteger2 orientedTo: aCharacter 
	^self new.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:15:12'!
ERROR!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:15:33'!
position
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:15:44' prior: 50859375!
position
	^'0 0'! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:15:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:15:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:16:23'!
test02
|rover|

	rover := MarsRover inX: 1 inY: 1 orientedTo: $N.
	
	self assert: '1 1' equals: rover position.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:16:32'!
FAILURE!
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 13:18:19' prior: 50859368!
inX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	^self new initializeInX: anXCoordinate inY: aYCoordinate.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 5/17/2021 13:18:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'xCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 5/17/2021 13:18:37'!
Object subclass: #MarsRover
	instanceVariableNames: 'xCoordinate yCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:18:37'!
initializeInX: anXCoordinate inY: aYCoordinate 
	self shouldBeImplemented.
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:18:44' prior: 50859416!
initializeInX: anXCoordinate inY: aYCoordinate 
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:19:57' prior: 50859379!
position
	(xCoordinate = 0 and: yCoordinate = 0) ifTrue: [^'0 0'].
	^'1 1'! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:20:06'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:20:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:20:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:20:26' prior: 50859387!
test02
|rover|

	rover := MarsRover inX: -1 inY: -1 orientedTo: $N.
	
	self assert: '-1 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:20:27'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:20:36' prior: 50859442!
test02
|rover|

	rover := MarsRover inX: -1 inY: -1 orientedTo: $N.
	
	self assert: '1 1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:20:45' prior: 50859452!
test02
|rover|

	rover := MarsRover inX: 1 inY: 1 orientedTo: $N.
	
	self assert: '1 1' equals: rover position.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:20:46'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:20:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:20:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:21:03'!
test03
|rover|

	rover := MarsRover inX: -1 inY: -1 orientedTo: $N.
	
	self assert: '-1 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:21:04'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:21:51' prior: 50859429!
position
	(xCoordinate = 0 and: yCoordinate = 0) ifTrue: [^'0 0'].
	(xCoordinate = 1 and: yCoordinate = 1) ifTrue: [^'1 1'].
	^'-1 -1'.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:21:53'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:21:53'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:21:53'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:21:53'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:23:05' prior: 50859482!
position
	^xCoordinate printString , ' ', yCoordinate printString.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:23:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:23:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:23:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:23:53'!
test04
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	
	self assert: $N equals: rover orientation.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:23:58'!
ERROR!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:24:13'!
orientation
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:24:20' prior: 50859518!
orientation
	^$N.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:24:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:24:26'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:24:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:24:26'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:24:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:24:39'!
test05
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $E.
	
	self assert: $E equals: rover orientation.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:24:41'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:24:54'!
FAILURE!
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 13:25:28' prior: 50859396!
inX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	^self new initializeInX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 5/17/2021 13:25:39'!
Object subclass: #MarsRover
	instanceVariableNames: 'xCoordinate yCoordinate orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:25:40'!
initializeInX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	self shouldBeImplemented.
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.
	orientation := anOrientation.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:25:47' prior: 50859563!
initializeInX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.
	orientation := anOrientation.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:26:13'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:27:09' prior: 50859522!
orientation
	(orientation = $N) ifTrue: [^$N].
	^$E.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:27:11'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:27:39'!
test06
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $S.
	
	self assert: $S equals: rover orientation.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:27:43'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:28:05' prior: 50859582!
orientation
	(orientation = $N) ifTrue: [^$N].
	(orientation = $S) ifTrue: [^$S].
	^$E.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:28:08'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:28:25' prior: 50859610!
orientation
	^orientation .! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:28:27' prior: 50859632!
orientation
	^orientation.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:28:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:28:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:32:35'!
test07
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'f'.
	
	self assert: '0 1' equals: rover position.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:32:41'!
ERROR!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:33:00'!
commandSequence: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:33:24' prior: 50859665!
commandSequence: aString 
	yCoordinate := 1.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:33:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:33:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:33:36'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:34:55'!
test08
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'ff'.
	
	self assert: '0 2' equals: rover position.! !

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:34:56'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:36:38' prior: 50859670!
commandSequence: aCommandSequence
	yCoordinate := 1.
	(aCommandSequence = 'ff') ifTrue: [
		yCoordinate := 2.	
	]! !

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:36:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:36:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:36:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:37:08'!
test09
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'fff'.
	
	self assert: '0 3' equals: rover position.! !

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:37:12'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:37:35' prior: 50859703!
commandSequence: aCommandSequence
	yCoordinate := 1.
	(aCommandSequence = 'ff') ifTrue: [
		yCoordinate := 2.	
	].
	(aCommandSequence = 'fff') ifTrue: [
		yCoordinate := 3.	
	]! !

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:37:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:37:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:37:39'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:37:39'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:37:40'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:40:22' prior: 50859740!
commandSequence: aCommandSequence
	aCommandSequence do: [:command | self processCommand: command].! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:41:05'!
processCommand: aCommand

	yCoordinate := yCoordinate + 1.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:41:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:41:39'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:41:40'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:42:29'!
test10
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:42:35'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:44:59' prior: 50859778!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:46:04' prior: 50859816!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	yCoordinate := yCoordinate - 1.
		! !

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:46:08'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:47:39'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:47:40'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:47:40'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:47:40'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:47:40'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:48:14' prior: 50859822!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:48:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:48:31'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:48:55'!
test11
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'bb'.
	
	self assert: '0 -2' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:50:47' prior: 50859888!
test11
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'r'.
	
	self assert: $E equals: rover orientation.! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:50:57'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:51:59' prior: 50859857!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		orientation := $E.
	].
		! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:52:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:52:01'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:52:17'!
test12
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rr'.
	
	self assert: $S equals: rover orientation.! !

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 13:52:18'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:54:39' prior: 50859906!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		(orientation = $N) ifTrue: [orientation := $E].
		(orientation = $E) ifTrue: [orientation := $S].
	].
		! !

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:54:44'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:54:45'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:54:45'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:54:45'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:54:45'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:54:45'!
FAILURE!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 13:54:45'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:54:45'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:56:15' prior: 50859953!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		(orientation = $N) ifTrue: [orientation := $E] ifFalse: [
			(orientation = $E) ifTrue: [orientation := $S].
		].
	].
		! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:56:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 13:56:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 13:56:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 13:56:33'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 13:56:33'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 13:56:33'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 13:56:33'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:56:46' prior: 50859943!
test12
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrr'.
	
	self assert: $O equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:56:57' prior: 50860042!
test12
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rr'.
	
	self assert: $S equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 13:57:07'!
test13
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrr'.
	
	self assert: $O equals: rover orientation.! !

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 13:57:14'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 13:59:58' prior: 50859997!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		(orientation = $N) ifTrue: [orientation := $E] ifFalse: [
			(orientation = $E) ifTrue: [orientation := $S] ifFalse: [
				(orientation = $S) ifTrue: [orientation := $O].
			].
		].
	].
		! !

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:00:00'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:00:01'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:00:17'!
test14
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrrr'.
	
	self assert: $N equals: rover orientation.! !

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:00:18'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:01:25' prior: 50860068!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		(orientation = $N) ifTrue: [orientation := $E] ifFalse: [
			(orientation = $E) ifTrue: [orientation := $S] ifFalse: [
				(orientation = $S) ifTrue: [orientation := $O] ifFalse: [
					(orientation = $O) ifTrue: [orientation := $N] 
				].
			].
		].
	].
		! !

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:01:35'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:01:36'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:01:37'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:01:37'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:03:11'!
rotateRight

	(orientation = $N) ifTrue: [orientation := $E] ifFalse: [
		(orientation = $E) ifTrue: [orientation := $S] ifFalse: [
			(orientation = $S) ifTrue: [orientation := $O] ifFalse: [
				(orientation = $O) ifTrue: [orientation := $N] 
			].
		].
	].
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:03:16'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:03:39' prior: 50860125!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:03:42'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:03:42'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:03:42'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:03:42'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:03:43'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:06:22' prior: 50860176!
rotateRight
|tempOrientation|
	
	(orientation = $N) ifTrue: [tempOrientation := $E].
	(orientation = $E) ifTrue: [tempOrientation := $S].
	(orientation = $S) ifTrue: [tempOrientation := $O].
	(orientation = $O) ifTrue: [tempOrientation := $N].
	
	orientation := tempOrientation.
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:06:27'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:06:59'!
test15
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'l'.
	
	self assert: $O equals: rover orientation.! !

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:07:01'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:08:14' prior: 50860220!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		orientation := $O.
	].
		! !

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:08:16'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:08:17'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:08:31'!
test16
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'll'.
	
	self assert: $S equals: rover orientation.! !

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:08:33'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:11:06' prior: 50860316!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		|tempOrientation|
		(orientation = $N) ifTrue: [tempOrientation := $O].
		(orientation = $O) ifTrue: [tempOrientation := $S].
		orientation := tempOrientation.
	].
		! !

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:11:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:11:18'!
test17
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'lll'.
	
	self assert: $E equals: rover orientation.! !

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:11:49'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:13:06' prior: 50860374!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		|tempOrientation|
		(orientation = $N) ifTrue: [tempOrientation := $O].
		(orientation = $O) ifTrue: [tempOrientation := $S].
		(orientation = $S) ifTrue: [tempOrientation := $E].
		orientation := tempOrientation.
	].
		! !

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:13:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:13:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:13:09'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:13:21' prior: 50860429!
test17
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'llll'.
	
	self assert: $N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:13:25' prior: 50860498!
test17
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'lll'.
	
	self assert: $E equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:13:33'!
test18
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'llll'.
	
	self assert: $N equals: rover orientation.! !

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:13:39'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:14:25' prior: 50860439!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		|tempOrientation|
		(orientation = $N) ifTrue: [tempOrientation := $O].
		(orientation = $O) ifTrue: [tempOrientation := $S].
		(orientation = $S) ifTrue: [tempOrientation := $E].
		(orientation = $E) ifTrue: [tempOrientation := $N].
		orientation := tempOrientation.
	].
		! !

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:14:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:14:28'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:14:56' prior: 50860524!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		yCoordinate := yCoordinate + 1.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:15:27'!
rotateLeft
|tempOrientation|
	(orientation = $N) ifTrue: [tempOrientation := $O].
	(orientation = $O) ifTrue: [tempOrientation := $S].
	(orientation = $S) ifTrue: [tempOrientation := $E].
	(orientation = $E) ifTrue: [tempOrientation := $N].
	
	orientation := tempOrientation.
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:15:35'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:15:36'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:15:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:16:38'!
test19
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rf'.
	
	self assert: '1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:16:43'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:33:35' prior: 50860587!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate + 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate + 1].
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:33:37'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:33:38'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:33:39'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:33:39'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:34:02' prior: 50860650!
test19
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrf'.
	
	self assert: '0 -1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:34:24' prior: 50860721!
test19
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rf'.
	
	self assert: '1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:34:31'!
test20
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rf'.
	
	self assert: '1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:34:43' prior: 50860737!
test20
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrf'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:34:56'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:35:43' prior: 50860660!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate + 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate + 1].
		(orientation = $S) ifTrue: [yCoordinate := yCoordinate - 1].
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:36:26'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:36:27'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:36:28'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:36:28'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:36:28'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:36:28'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:36:28'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:36:57' prior: 50860745!
test20
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrrf'.
	
	self assert: '-1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:37:17' prior: 50860820!
test20
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrf'.
	
	self assert: '0 -1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:37:24' prior: 50860828!
test20
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrf'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:37:25'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:37:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:37:25'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:37:25'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:37:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:37:40'!
test21
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrrf'.
	
	self assert: '-1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:37:50'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:38:31' prior: 50860755!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate + 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate + 1].
		(orientation = $S) ifTrue: [yCoordinate := yCoordinate - 1].
		(orientation = $O) ifTrue: [xCoordinate := xCoordinate - 1].
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:38:33'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:38:34'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:39:05' prior: 50860892!
test21
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rrrf'.
	
	self assert: '-1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:39:07'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:39:07'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:39:07'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:39:07'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:39:07'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:39:08'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:40:10' prior: 50860902!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		yCoordinate := yCoordinate - 1.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:40:37'!
moveForward

	(orientation = $N) ifTrue: [yCoordinate := yCoordinate + 1].
	(orientation = $E) ifTrue: [xCoordinate := xCoordinate + 1].
	(orientation = $S) ifTrue: [yCoordinate := yCoordinate - 1].
	(orientation = $O) ifTrue: [xCoordinate := xCoordinate - 1].
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:41:03'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:41:04'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:41:05'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:41:57'!
test22
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rb'.
	
	self assert: '-1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:42:03'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:44:04' prior: 50861099!
test22
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $E.
	rover commandSequence: 'b'.
	
	self assert: '-1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:44:19'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:44:20'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:45:42' prior: 50861029!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate - 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate - 1].
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:45:45'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:45:49'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:45:50'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:46:03' prior: 50861109!
test22
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $S.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:46:10' prior: 50861191!
test22
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $E.
	rover commandSequence: 'b'.
	
	self assert: '-1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:46:26'!
test23
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $S.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:46:28'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:47:09' prior: 50861121!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate - 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate - 1].
		(orientation = $S) ifTrue: [yCoordinate := yCoordinate + 1].
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 14:57:35' prior: 50861217!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		(orientation = $N) ifTrue: [yCoordinate := yCoordinate - 1].
		(orientation = $E) ifTrue: [xCoordinate := xCoordinate - 1].
		(orientation = $S) ifTrue: [yCoordinate := yCoordinate + 1].
		(orientation = $O) ifTrue: [xCoordinate := xCoordinate + 1].
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:57:37'!
FAILURE!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:57:51'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:58:20' prior: 50861207!
test23
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $S.
	rover commandSequence: 'b'.
	
	self assert: '0 1' equals: rover position.! !

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:58:28'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:58:29'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:58:30'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:58:30'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:58:30'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:58:30'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:58:30'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 14:58:55'!
test24
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $O.
	rover commandSequence: 'b'.
	
	self assert: '1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 14:59:03'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 14:59:04'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 14:59:05'!
PASSED!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:00:07' prior: 50861232!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		self moveBackwards.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:00:29'!
moveBackwards
	(orientation = $N) ifTrue: [yCoordinate := yCoordinate - 1].
	(orientation = $E) ifTrue: [xCoordinate := xCoordinate - 1].
	(orientation = $S) ifTrue: [yCoordinate := yCoordinate + 1].
	(orientation = $O) ifTrue: [xCoordinate := xCoordinate + 1].! !

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 15:00:54'!
PASSED!

Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'GR 5/17/2021 15:10:40'!
Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'GR 5/17/2021 15:10:57'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'GR 5/17/2021 15:11:00'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'GR 5/17/2021 15:11:13'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'GR 5/17/2021 15:11:16'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:12:27' overrides: 16882216!
printString
	^self subclassResponsibility.! !
!East methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:13:26' overrides: 16882188!
print
	^$E.! !

!methodRemoval: East #print stamp: 'GR 5/17/2021 15:14:20'!
print
	^$E.!

!methodRemoval: CardinalPoint #printString stamp: 'GR 5/17/2021 15:14:31'!
printString
	^self subclassResponsibility.!

Object subclass: #Position
	instanceVariableNames: 'xCoordinate yCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Position category: 'MarsRover' stamp: 'GR 5/17/2021 15:16:17'!
Object subclass: #Position
	instanceVariableNames: 'xCoordinate yCoordinate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!East methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:21:08'!
rotateRight
	^South new.! !
!CardinalPoint methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:21:36'!
rotateRight

	^self subclassResponsibility.! !
!North methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:21:57' overrides: 50861490!
rotateRight
	^East new.! !
!South methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:22:17' overrides: 50861490!
rotateRight
	^West new.! !
!West methodsFor: 'no messages' stamp: 'GR 5/17/2021 15:22:53' overrides: 50861490!
rotateRight

	^West new.! !
!West methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:35:56' prior: 50861503 overrides: 50861490!
rotateRight

	^North new.! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:37:06'!
rotateLeft

	^self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:37:25' overrides: 50861512!
rotateLeft
	^North new.! !
!North methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:37:42' overrides: 50861512!
rotateLeft
	^West new.! !
!South methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:37:54' overrides: 50861512!
rotateLeft
	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:38:06' overrides: 50861512!
rotateLeft
	^South new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:39:52' prior: 50859354!
test01
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	
	self assert: '0 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:42:02' prior: 50861533!
test01
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: North new.
	
	self assert: '0 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:42:43' prior: 50861540!
test01
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	self assert: '0 0' equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 15:42:54'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:43:11' prior: 50859459!
test02
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 1 inY: 1 orientedTo: orientation.
	
	self assert: '1 1' equals: rover position.! !

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 15:43:18'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:43:47' prior: 50859473!
test03
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: -1 inY: -1 orientedTo: orientation.
	
	self assert: '-1 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 15:43:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 15:43:56'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 15:43:57'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:44:18' prior: 50859510!
test04
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 15:44:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:45:00' prior: 50859537!
test05
|rover orientation|
	orientation := East new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 15:45:08'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:45:39' prior: 50859601!
test06
|rover orientation|
	orientation := South new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 15:45:42'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:46:08' prior: 50859896!
test11
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: $E equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:46:18' prior: 50861669!
test11
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: East new equals: rover orientation.! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:46:28'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:47:19' prior: 50860262!
rotateRight
		
	orientation := orientation rotateRight .
		! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:47:21' prior: 50861689!
rotateRight
		
	orientation := orientation rotateRight.
		! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:47:23'!
FAILURE!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:49:00' overrides: 16881029!
= aCardinalPoint

	^aCardinalPoint isKindOf: self class.! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:49:26'!
PASSED!

self class!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:50:51' prior: 50861678!
test11
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rr'.
	
	self assert: South new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:51:03' prior: 50860050!
test12
|rover|

	rover := MarsRover inX: 0 inY: 0 orientedTo: $N.
	rover commandSequence: 'rr'.
	
	self assert: $S equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:51:13' prior: 50861710!
test11
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: East new equals: rover orientation.! !

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:51:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:51:44' prior: 50861720!
test12
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rr'.
	
	self assert: South new equals: rover orientation.! !

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 15:51:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:52:07' prior: 50860058!
test13
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rrr'.
	
	self assert: West new equals: rover orientation.! !

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 15:52:08'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 15:52:09'!
ERROR!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 15:52:09'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:52:09'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 15:52:10'!
ERROR!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 15:52:10'!
ERROR!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 15:52:10'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 15:52:10'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 15:52:10'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 15:52:19'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:52:44' prior: 50860115!
test14
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	rover commandSequence: 'rrrr'.
	
	self assert: North new equals: rover orientation.! !

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 15:52:47'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:53:13' prior: 50860306!
test15
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'l'.
	
	self assert: West new equals: rover orientation.! !

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 15:53:16'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:54:04' prior: 50860597!
rotateLeft
	
	orientation := orientation rotateLeft.
		! !

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 15:54:13'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:54:33' prior: 50860364!
test16
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'll'.
	
	self assert: South new equals: rover orientation.! !

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 15:54:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:54:51' prior: 50860506!
test17
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'lll'.
	
	self assert: East new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:55:10' prior: 50860514!
test18
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'llll'.
	
	self assert: North new equals: rover orientation.! !

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 15:55:15'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:55:28'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:56:11' prior: 50860729!
test19
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rf'.
	
	self assert: '1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:56:14'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:56:14'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:57:04'!
FAILURE!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:57:05'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 15:58:48' prior: 50861039!
moveForward

	(orientation isKindOf: North) ifTrue: [yCoordinate := yCoordinate + 1].
	(orientation isKindOf: East) ifTrue: [xCoordinate := xCoordinate + 1].
	(orientation isKindOf: South) ifTrue: [yCoordinate := yCoordinate - 1].
	(orientation isKindOf: West) ifTrue: [xCoordinate := xCoordinate - 1].
		! !

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:58:51'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:58:54'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 15:58:57'!
ERROR!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 15:58:57'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:59:16' prior: 50860836!
test20
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rrf'.
	
	self assert: '0 -1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 15:59:25' prior: 50860971!
test21
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'rrrf'.
	
	self assert: '-1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 15:59:46'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 15:59:49'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 15:59:50'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 15:59:52'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 15:59:54'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 15:59:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:00:59'!
test25
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:01:03'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:01:03'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:01:15'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:01:45' prior: 50861199!
test22
|rover orientation|
	orientation := East new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '-1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:02:01' prior: 50861255!
test23
|rover orientation|
	orientation := South new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '0 1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:02:12' prior: 50861318!
test24
|rover orientation|
	orientation := West new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '1 0' equals: rover position.! !

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:02:21'!
FAILURE!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:02:22'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:03:37' prior: 50861393!
moveBackwards
	(orientation isKindOf: North) ifTrue: [yCoordinate := yCoordinate - 1].
	(orientation isKindOf: East ) ifTrue: [xCoordinate := xCoordinate - 1].
	(orientation isKindOf: South ) ifTrue: [yCoordinate := yCoordinate + 1].
	(orientation isKindOf: West) ifTrue: [xCoordinate := xCoordinate + 1].! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:03:42' prior: 50862010!
moveBackwards
	(orientation isKindOf: North) ifTrue: [yCoordinate := yCoordinate - 1].
	(orientation isKindOf: East) ifTrue: [xCoordinate := xCoordinate - 1].
	(orientation isKindOf: South) ifTrue: [yCoordinate := yCoordinate + 1].
	(orientation isKindOf: West) ifTrue: [xCoordinate := xCoordinate + 1].! !

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:03:47'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:03:54'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:03:58'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:03:58'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:03:58'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:03:59'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:03:59'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:03:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:04:33' prior: 50859656!
test07
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'f'.
	
	self assert: '0 1' equals: rover position.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:04:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:04:48' prior: 50859693!
test08
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'ff'.
	
	self assert: '0 2' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:05:01' prior: 50859730!
test09
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'fff'.
	
	self assert: '0 3' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:05:10' prior: 50859806!
test10
|rover orientation|
	orientation := North new.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:05:27'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:05:28'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:05:29'!
PASSED!
!Position class methodsFor: 'no messages' stamp: 'GR 5/17/2021 16:06:09'!
inX: anXCoordinate inY: aYCoordinate! !
!Position class methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:06:47' prior: 50862197!
inX: anXCoordinate inY: aYCoordinate
	
	^self new initializeInX: anXCoordinate inY: aYCoordinate .! !
!Position methodsFor: 'no messages' stamp: 'GR 5/17/2021 16:07:51'!
initializeInX: anXCoordinate inY: aYCoordinate

	xCoordinate := anXCoordinate.
	yCoordinate  := aYCoordinate.! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:09:49'!
advanceAtPosition: aPosition
	^self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:10:37' overrides: 50862215!
advanceAtPosition: aPosition
	aPosition advanceEast.! !
!North methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:10:54' overrides: 50862215!
advanceAtPosition: aPosition
	aPosition advanceNorth.! !
!South methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:11:07' overrides: 50862215!
advanceAtPosition: aPosition
	aPosition advanceWest.! !
!South methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:11:21' prior: 50862230 overrides: 50862215!
advanceAtPosition: aPosition
	aPosition advanceSouth.! !
!West methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:11:34' overrides: 50862215!
advanceAtPosition: aPosition
	aPosition advanceWest.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'GR 5/17/2021 16:12:38'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 16:14:01'!
inPosition: aPosition orientedTo: anOrientation 
	^self new initializeIn: aPosition orientedTo: anOrientation.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:14:35'!
initializeIn: aPosition orientedTo: anOrientation 
	position := aPosition.
	orientation := anOrientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:15:40' prior: 50861547!
test01
|rover orientation position|
	orientation := North new.
	position := Position InX: 0 inY: 0.
	rover := MarsRover inX: 0 inY: 0 orientedTo: orientation.
	
	self assert: '0 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:16:18' prior: 50862270!
test01
|rover orientation position|
	orientation := North new.
	position := Position InX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: '0 0' equals: rover position.! !
!MarsRover class methodsFor: 'A' stamp: 'GR 5/17/2021 16:16:41'!
in: aPosition orientedTo: anOrientation 
	^self new initializeIn: aPosition orientedTo: anOrientation.! !

!methodRemoval: MarsRover class #inPosition:orientedTo: stamp: 'GR 5/17/2021 16:16:42'!
inPosition: aPosition orientedTo: anOrientation 
	^self new initializeIn: aPosition orientedTo: anOrientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:17:21' prior: 50862280!
test01
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: '0 0' equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:17:25'!
FAILURE!

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:17:25'!
FAILURE!
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:18:35' overrides: 16882216!
printString
	^xCoordinate printString , ' ' , yCoordinate printString.! !
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:18:55' prior: 50859498!
position
	^position printString.! !

!methodRemoval: Position #printString stamp: 'GR 5/17/2021 16:19:46'!
printString
	^xCoordinate printString , ' ' , yCoordinate printString.!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:19:56' prior: 50862322!
position
	^position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:20:11' prior: 50862302!
test01
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:20:59' prior: 50861558!
test02
|rover orientation position|
	orientation := North new.
	position := Position inX: 1 inY: 1.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:21:04'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:21:06'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:21:25' prior: 50861569!
test03
|rover orientation position|
	orientation := North new.
	position := Position inX: -1 inY: -1.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.! !

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:21:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:21:38' prior: 50861636!
test04
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:21:47' prior: 50861647!
test05
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:22:04' prior: 50862381!
test05
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:22:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:22:21' prior: 50861658!
test06
|rover orientation position|
	orientation := South new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:23:04' prior: 50862098!
test07
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'f'.
	
	self assert: (Position inX: 0 inY:1) equals: rover position.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:23:08'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:23:08'!
ERROR!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:23:34'!
ERROR!
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:24:48'!
advancePositionNorth

	yCoordinate := yCoordinate + 1.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:25:24'!
advanceNorth

	yCoordinate := yCoordinate + 1.! !

!methodRemoval: Position #advancePositionNorth stamp: 'GR 5/17/2021 16:25:25'!
advancePositionNorth

	yCoordinate := yCoordinate + 1.!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:26:02' prior: 50861907!
moveForward

	orientation advanceAtPosition: position.
		! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:26:19'!
advanceSouth

	yCoordinate := yCoordinate + 1.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:26:26' prior: 50862451!
advanceSouth

	yCoordinate := yCoordinate - 1.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:26:39'!
advanceWest

	xCoordinate := xCoordinate - 1.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:26:52'!
advanceEast

	xCoordinate := xCoordinate *+ 1.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:26:55' prior: 50862464!
advanceEast

	xCoordinate := xCoordinate + 1.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:27:14'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:27:14'!
FAILURE!
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:28:30' overrides: 16881029!
= aPosition
	^xCoordinate = aPosition xCoordinate and: yCoordinate = aPosition yCoordinate.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:28:47' prior: 50862479 overrides: 16881029!
= aPosition
	^xCoordinate = (aPosition xCoordinate) and: yCoordinate = (aPosition yCoordinate).! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:29:20'!
yCoordinate
	^yCoordinate.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:29:25'!
xCoordinate
	^xCoordinate.! !

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:29:42'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:29:45'!
ERROR!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:29:45'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:30:43' prior: 50862110!
test08
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'ff'.
	
	self assert: '0 2' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:30:56' prior: 50862120!
test09
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'fff'.
	
	self assert: '0 3' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:31:07' prior: 50862130!
test10
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: '0 -1' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:31:17' prior: 50861728!
test11
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: East new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:31:34' prior: 50861740!
test12
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rr'.
	
	self assert: South new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:31:45' prior: 50861752!
test13
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrr'.
	
	self assert: West new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:31:54' prior: 50861822!
test14
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	rover commandSequence: 'rrrr'.
	
	self assert: North new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:32:04' prior: 50861834!
test15
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'l'.
	
	self assert: West new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:32:20' prior: 50861853!
test16
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'll'.
	
	self assert: South new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:32:28' prior: 50861865!
test17
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'lll'.
	
	self assert: East new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:32:36' prior: 50861875!
test18
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'llll'.
	
	self assert: North new equals: rover orientation.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:32:47' prior: 50861889!
test19
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rf'.
	
	self assert: '1 0' equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:33:15' prior: 50862628!
test19
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rf'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:33:56' prior: 50861929!
test20
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrf'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:34:13' prior: 50861939!
test21
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrrf'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:35:10' prior: 50861979!
test22
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:35:35' prior: 50861988!
test23
|rover orientation position|
	orientation := South new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: 1) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:35:56' prior: 50861997!
test24
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:36:17' prior: 50861962!
test25
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:36:37'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:36:38'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:36:38'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:36:39'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:36:39'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:36:47'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:38:41'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:38:42'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:40:55' prior: 50862507!
test08
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'ff'.
	
	self assert: (Position inX: 0 inY: 2) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:41:07' prior: 50862518!
test09
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'fff'.
	
	self assert: (Position inX: 0 inY: 3) equals: rover position.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:41:15' prior: 50862529!
test10
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:41:22'!
FAILURE!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:41:22'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:41:23'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:41:23'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:41:23'!
FAILURE!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:41:23'!
FAILURE!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:41:23'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:41:23'!
FAILURE!

!methodRemoval: MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:41:44'!
test25
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:41:53'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:41:54'!
FAILURE!
!MarsRover methodsFor: 'A' stamp: 'GR 5/17/2021 16:42:50' prior: 50862022!
moveBackwards
	orientation moveBackwardsAtPosition: position.! !

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:42:54'!
ERROR!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:43:02'!
ERROR!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:43:30'!
moveBackwardsAtPosition: aPosition
	^self subclassResponsibility.! !
!East methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:44:16' overrides: 50862904!
moveBackwardsAtPosition: aPosition
	aPosition moveBackwardsEast.! !
!North methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:44:28' overrides: 50862904!
moveBackwardsAtPosition: aPosition
	aPosition moveBackwardsNorth.! !
!South methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:44:41' overrides: 50862904!
moveBackwardsAtPosition: aPosition
	aPosition moveBackwardsSouth.! !
!West methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:44:51' overrides: 50862904!
moveBackwardsAtPosition: aPosition
	aPosition moveBackwardsWest.! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:45:32'!
moveBackwardsNorth

	yCoordinate := yCoordinate - 1.

	! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:45:41'!
moveBackwardsSouth

	yCoordinate := yCoordinate + 1.

	! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:45:52'!
moveBackwardsWest

	xCoordinate := xCoordinate + 1.

	! !
!Position methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:46:00'!
moveBackwardsEast

	xCoordinate := xCoordinate - 1.

	! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:46:08'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:46:09'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:46:10'!
PASSED!

!methodRemoval: MarsRover #initializeInX:inY:orientedTo: stamp: 'GR 5/17/2021 16:46:39'!
initializeInX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.
	orientation := anOrientation.!

!methodRemoval: MarsRover #initializeInX:inY: stamp: 'GR 5/17/2021 16:46:48'!
initializeInX: anXCoordinate inY: aYCoordinate 
	xCoordinate := anXCoordinate.
	yCoordinate := aYCoordinate.!

!methodRemoval: MarsRover class #inX:inY:orientedTo: stamp: 'GR 5/17/2021 16:48:39'!
inX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation 
	^self new initializeInX: anXCoordinate inY: aYCoordinate orientedTo: anOrientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 16:53:04'!
test25
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'bkb'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !
!MarsRover methodsFor: 'operations - private' stamp: 'GR 5/17/2021 16:53:25' prior: 50861383!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		self moveBackwards.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
	^[^self.]
		! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:53:36'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:53:37'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:53:38'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:53:38'!
FAILURE!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:53:38'!
FAILURE!
!MarsRover methodsFor: 'operations - private' stamp: 'GR 5/17/2021 16:54:39' prior: 50863041!
processCommand: aCommand
	(aCommand = $f) ifTrue:[
		self moveForward.
	].
	(aCommand = $b) ifTrue:[
		self moveBackwards.
	].
	(aCommand = $r) ifTrue:[
		self rotateRight.
	].
	(aCommand = $l) ifTrue:[
		self rotateLeft.
	].
		! !
!MarsRover methodsFor: 'operations' stamp: 'GR 5/17/2021 16:56:53' prior: 50859772!
commandSequence: aCommandSequence
	|validCommands|
	validCommands := #($f $b $l $r).
	aCommandSequence do: [:command | (validCommands includes: command) ifFalse: [^self].
		self processCommand: command ].! !

!testRun: #MarsRoverTest #test01 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'GR 5/17/2021 16:56:59'!
PASSED!

!testRun: #MarsRoverTest #test13 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test14 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test15 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test16 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test17 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test18 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test19 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test20 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test21 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test22 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test23 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test24 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!testRun: #MarsRoverTest #test25 stamp: 'GR 5/17/2021 16:57:00'!
PASSED!

!methodRemoval: MarsRoverTest #test02 stamp: 'GR 5/17/2021 16:57:44'!
test02
|rover orientation position|
	orientation := North new.
	position := Position inX: 1 inY: 1.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.!

!methodRemoval: MarsRoverTest #test03 stamp: 'GR 5/17/2021 16:57:50'!
test03
|rover orientation position|
	orientation := North new.
	position := Position inX: -1 inY: -1.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.!

!methodRemoval: MarsRoverTest #test05 stamp: 'GR 5/17/2021 16:57:55'!
test05
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.!

!methodRemoval: MarsRoverTest #test06 stamp: 'GR 5/17/2021 16:57:58'!
test06
|rover orientation position|
	orientation := South new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.!

!methodRemoval: MarsRoverTest #test08 stamp: 'GR 5/17/2021 16:58:07'!
test08
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'ff'.
	
	self assert: (Position inX: 0 inY: 2) equals: rover position.!

!methodRemoval: MarsRoverTest #test09 stamp: 'GR 5/17/2021 16:58:13'!
test09
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'fff'.
	
	self assert: (Position inX: 0 inY: 3) equals: rover position.!

----SNAPSHOT----(17 May 2021 16:59:02) CuisUniversity-4532.image priorSource: 16885703!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:24'!
test01InitializationShouldKeepPosition
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50853649!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldKeepPosition class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854177!
test13WhenATestIsRenamedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: false' in: #TestSomething. 
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRenamedBeforeRunningTheTests: #test01InitializationShouldKeepPosition class: #TestSomething)! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50853846!
test08WhenThereIsOneTestAndPassesThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: (NotDoingTDD new).
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldKeepPosition class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854909!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854607!
test11WhenATestClassIsAddedIsStillInRed
	| result |
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #TestSomethingB subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50855426!
test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01InitializationShouldKeepPosition class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten .
	self assertHasNoErrors: result.
! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50853412!
test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test02
	! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854338!
test09ReRunFromASpecificChange
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	self assert: result changes size equals: 4.

	! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854207!
test02ResultKnowsTheChangesThatWereDone
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass. 
		self runTest: #test01InitializationShouldKeepPosition class: #TestClass.
	].
		
	result _ tddGuru run.
	
	changes := result changes.
	self assert: changes size equals: 3.
	self assert: changes first category equals: #newTestClass.
	self assert: changes second category equals: #newTest.
	self assert: changes third category equals: #testRun.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854492!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50853673!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldKeepPosition class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854427!
test04WhenTheTestFailsIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:25' prior: 50854623!
test12WhenTheTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854591!
test11WhenAModelClassIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855531!
test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldKeepPosition class: #TestSomething).
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855244!
test04WhenATestFailsThenIsInRedState
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855398!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02 class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #test01InitializationShouldKeepPosition in: #TestSomethingA)
	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855489!
test16WhenATestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.

	self logChangesWhile: [ 	
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
		self compileMethod: 'test01A self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestSomethingA.
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assertHasNoErrors: result.
! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854226!
test03TDDStateForEachChange
	| result firstChange secondChange thirdChange changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClass
	].
		
	result _ tddGuru run.
		
	changes := result changes.
	firstChange := changes first.
	secondChange := changes second.
	thirdChange := changes third.
	
	self assert: (result stateAfter: firstChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: secondChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: thirdChange) equals: Red .! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50853240!
test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self error' in: #TestClass. 
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldKeepPosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #test01InitializationShouldKeepPosition class: #TestClass).
	self assert: tddGuru currentState equals: Red.
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854446!
test05WhenAProductionMethodIsChangedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50853718!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50853392!
test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test02 from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldKeepPosition
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854408!
test03WhenTheTestPassesThenIsInGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854572!
test10WhenAModelMethodIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1.' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50853209!
test07WhenATestPassesNothingHappens
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldKeepPosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854766!
test05WhenATestIsRenamedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [  
		self compileMethod: 'test01A self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855156!
test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self renameClass: #TestClassA to: #TestClassB.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassB
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50855474!
test15WhenTheTestIsRemovedThenIsInGreen
	| result |

	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.
! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50853896!
test11WhenATestIsRenamedIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01bla self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:26' prior: 50854305!
test07RunFromASpecificChange
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #ExampleClass subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 3.

	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50854541!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02 from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50855549!
test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestClassB ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #test01InitializationShouldKeepPosition class: #TestClassB).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50854287!
test06WhenATestHasAnErrorThisTestDoesNotFail
	| result changes |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA
	].
		
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 1.
	self assert: changes first category equals: #testRun.
	self assert: changes first testSelector equals: #test01InitializationShouldKeepPosition.
	! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50854321!
test08ReRunTheWholeAnalysis
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA
	].
		
	result _ tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	changes := result changes.
	self assert: changes size equals: 4.

	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50855368!
test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingB.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01InitializationShouldKeepPosition class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten:  #test01InitializationShouldKeepPosition in: #TestSomethingB)! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50853878!
test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: true' in: #TestClassA.

	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldKeepPosition class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50853281!
test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldKeepPosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #test01InitializationShouldKeepPosition class: #TestClass).
	self assert: tddGuru currentState equals: Red.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:27' prior: 50853629!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldKeepPosition class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:28' prior: 50854157!
test12WhenATestIsChangedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 self assert: false' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldKeepPosition.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:28' prior: 50854522!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02 class: #TestSomething).! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50854375!
test01WhenAProductionClassIsAddedIsStillInRed
	| result  |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ProductionClass subclassOf: Object ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50854391!
test02WhenAProductionMethodIsAddedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50854661!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #test01InitializationShouldKeepPosition class: #TestSomething)! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50853261!
test10WhenATestIsRenamedThenIsRefactoring
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: true' in: #TestClass.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50854465!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldKeepPosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50855578!
test20WhenAFirstTestIsAddedIsStillWritingAFailingTest
	| result |
	
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestClassA. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldKeepPosition.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50855594!
test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: #test01InitializationShouldKeepPosition in: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodAddedBeforeRunningTests: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:29' prior: 50853432!
test04WhenAnotherTestIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.

	self logChangesWhile: [
		self newClassNamed: #TestClassB subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassB.
		self compileMethod: 'test02 self assert: false' in: #TestClassB.
		self removeMethodWithSelector: #test01InitializationShouldKeepPosition from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother:  #test02 class: #TestClassB).! !

!methodRemoval: MarsRoverTest #test01 stamp: 'GR 5/17/2021 17:02:29'!
test01
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:02:46'!
test02InitializationShouldPreserveOrientation
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'GR 5/17/2021 17:02:47'!
test04
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: orientation equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:10'!
test01InitializationShouldPreservePosition
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50864157!
test12WhenATestIsChangedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 self assert: false' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldPreservePosition.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863350!
test11WhenATestClassIsAddedIsStillInRed
	| result |
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #TestSomethingB subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50864021!
test06WhenATestHasAnErrorThisTestDoesNotFail
	| result changes |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA
	].
		
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 1.
	self assert: changes first category equals: #testRun.
	self assert: changes first testSelector equals: #test01InitializationShouldPreservePosition.
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863955!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02 from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863855!
test05WhenATestIsRenamedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [  
		self compileMethod: 'test01A self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863901!
test15WhenTheTestIsRemovedThenIsInGreen
	| result |

	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.
! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863836!
test07WhenATestPassesNothingHappens
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldPreservePosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50864315!
test20WhenAFirstTestIsAddedIsStillWritingAFailingTest
	| result |
	
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestClassA. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldPreservePosition.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863722!
test05WhenAProductionMethodIsChangedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863459!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50864041!
test08ReRunTheWholeAnalysis
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA
	].
		
	result _ tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	changes := result changes.
	self assert: changes size equals: 4.

	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863601!
test04WhenATestFailsThenIsInRedState
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:11' prior: 50863396!
test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test02
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864218!
test02WhenAProductionMethodIsAddedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863285!
test13WhenATestIsRenamedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: false' in: #TestSomething. 
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRenamedBeforeRunningTheTests: #test01InitializationShouldPreservePosition class: #TestSomething)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863815!
test10WhenAModelMethodIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1.' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863542!
test12WhenTheTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864112!
test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldPreservePosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #test01InitializationShouldPreservePosition class: #TestClass).
	self assert: tddGuru currentState equals: Red.! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864093!
test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: true' in: #TestClassA.

	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldPreservePosition class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863520!
test04WhenTheTestFailsIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864284!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863877!
test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self renameClass: #TestClassA to: #TestClassB.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassB
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863580!
test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldPreservePosition class: #TestSomething).
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863617!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02 class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #test01InitializationShouldPreservePosition in: #TestSomethingA)
	! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863310!
test08WhenThereIsOneTestAndPassesThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: (NotDoingTDD new).
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldPreservePosition class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864355!
test04WhenAnotherTestIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.

	self logChangesWhile: [
		self newClassNamed: #TestClassB subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassB.
		self compileMethod: 'test02 self assert: false' in: #TestClassB.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother:  #test02 class: #TestClassB).! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863493!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldPreservePosition class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863417!
test09ReRunFromASpecificChange
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	self assert: result changes size equals: 4.

	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864200!
test01WhenAProductionClassIsAddedIsStillInRed
	| result  |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ProductionClass subclassOf: Object ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50864136!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863673!
test03TDDStateForEachChange
	| result firstChange secondChange thirdChange changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClass
	].
		
	result _ tddGuru run.
		
	changes := result changes.
	firstChange := changes first.
	secondChange := changes second.
	thirdChange := changes third.
	
	self assert: (result stateAfter: firstChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: secondChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: thirdChange) equals: Red .! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:12' prior: 50863438!
test02ResultKnowsTheChangesThatWereDone
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass. 
		self runTest: #test01InitializationShouldPreservePosition class: #TestClass.
	].
		
	result _ tddGuru run.
	
	changes := result changes.
	self assert: changes size equals: 3.
	self assert: changes first category equals: #newTestClass.
	self assert: changes second category equals: #newTest.
	self assert: changes third category equals: #testRun.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50864179!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02 class: #TestSomething).! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863368!
test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01InitializationShouldPreservePosition class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten .
	self assertHasNoErrors: result.
! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863772!
test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test02 from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01InitializationShouldPreservePosition
	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863990!
test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestClassB ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #test01InitializationShouldPreservePosition class: #TestClassB).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863259!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01InitializationShouldPreservePosition class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863744!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863561!
test11WhenAModelClassIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863327!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863917!
test11WhenATestIsRenamedIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01bla self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863937!
test07RunFromASpecificChange
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #ExampleClass subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #test01InitializationShouldPreservePosition class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 3.

	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863793!
test03WhenTheTestPassesThenIsInGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01InitializationShouldPreservePosition class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50864060!
test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingB.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test01InitializationShouldPreservePosition class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten:  #test01InitializationShouldPreservePosition in: #TestSomethingB)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50864237!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #test01InitializationShouldPreservePosition class: #TestSomething)! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863647!
test16WhenATestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.

	self logChangesWhile: [ 	
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
		self compileMethod: 'test01A self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestSomethingA.
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50864333!
test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: #test01InitializationShouldPreservePosition in: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodAddedBeforeRunningTests: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50863698!
test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self error' in: #TestClass. 
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #test01InitializationShouldPreservePosition class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #test01InitializationShouldPreservePosition class: #TestClass).
	self assert: tddGuru currentState equals: Red.
	! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:13' prior: 50864263!
test10WhenATestIsRenamedThenIsRefactoring
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: true' in: #TestClass.
		self removeMethodWithSelector: #test01InitializationShouldPreservePosition from: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !

!methodRemoval: MarsRoverTest #test01InitializationShouldKeepPosition stamp: 'GR 5/17/2021 17:03:13'!
test01InitializationShouldKeepPosition
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	self assert: position equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:03:42'!
test03AdvancingNorthShouldIncreaseYCoordinate
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'f'.
	
	self assert: (Position inX: 0 inY:1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test07 stamp: 'GR 5/17/2021 17:03:43'!
test07
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'f'.
	
	self assert: (Position inX: 0 inY:1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:04:17'!
test4BackwardsNorthShouldDecreaseYCoordinate
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test10 stamp: 'GR 5/17/2021 17:04:18'!
test10
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:04:35'!
test4BackwardsNorthShouldDecreaseYCoord
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test4BackwardsNorthShouldDecreaseYCoordinate stamp: 'GR 5/17/2021 17:04:36'!
test4BackwardsNorthShouldDecreaseYCoordinate
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:04:51'!
test04BackwardsNorthShouldDecreaseYCoordinate
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test4BackwardsNorthShouldDecreaseYCoord stamp: 'GR 5/17/2021 17:04:52'!
test4BackwardsNorthShouldDecreaseYCoord
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:05:19'!
test05RotatingRightNorthIsEast
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: East new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test11 stamp: 'GR 5/17/2021 17:05:20'!
test11
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'r'.
	
	self assert: East new equals: rover orientation.!
!WarpBlt class methodsFor: 'examples' stamp: 'GR 5/17/2021 17:05:58'!
test06RotatingRightTwiceNorthIsSouth
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:05:58'!
test06RotatingRightTwiceNorthIsSouth
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rr'.
	
	self assert: South new equals: rover orientation.! !

!methodRemoval: WarpBlt class #test12 stamp: 'GR 5/17/2021 17:05:58'!
test12
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]!

!methodRemoval: MarsRoverTest #test12 stamp: 'GR 5/17/2021 17:05:58'!
test12
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rr'.
	
	self assert: South new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:07:06'!
test07RotatingRightThreeTimesNorthIsWest
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrr'.
	
	self assert: West new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test13 stamp: 'GR 5/17/2021 17:07:07'!
test13
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrr'.
	
	self assert: West new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:07:35'!
test08RotatingRightFourTimesNorthIsNorth
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	rover commandSequence: 'rrrr'.
	
	self assert: North new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test14 stamp: 'GR 5/17/2021 17:07:36'!
test14
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	
	rover commandSequence: 'rrrr'.
	
	self assert: North new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:07:57'!
test09RotatingLeftNorthIsWest
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'l'.
	
	self assert: West new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test15 stamp: 'GR 5/17/2021 17:07:58'!
test15
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'l'.
	
	self assert: West new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:08:22'!
test10RotatingLeftTwiceNorthIsSouth
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'll'.
	
	self assert: South new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test16 stamp: 'GR 5/17/2021 17:08:23'!
test16
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'll'.
	
	self assert: South new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:08:47'!
test11RotatingLeftThreeTimesNorthIsEast
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'lll'.
	
	self assert: East new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test17 stamp: 'GR 5/17/2021 17:08:48'!
test17
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'lll'.
	
	self assert: East new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:09:03'!
test12RotatingLeftFourTimesNorthIsNorth
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'llll'.
	
	self assert: North new equals: rover orientation.! !

!methodRemoval: MarsRoverTest #test18 stamp: 'GR 5/17/2021 17:09:04'!
test18
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'llll'.
	
	self assert: North new equals: rover orientation.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:10:42'!
test13AdvancingEast
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rf'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test19 stamp: 'GR 5/17/2021 17:10:43'!
test19
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rf'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:10:56'!
test14AdvancingSouth
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrf'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test20 stamp: 'GR 5/17/2021 17:10:57'!
test20
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrf'.
	
	self assert: (Position inX: 0 inY: -1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:11:16'!
test15AdvancingWest
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrrf'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test21 stamp: 'GR 5/17/2021 17:11:17'!
test21
|rover orientation position|
	orientation := North new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'rrrf'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:11:29'!
testMovingBackwardsEast
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.
! !

!methodRemoval: MarsRoverTest #test22 stamp: 'GR 5/17/2021 17:11:30'!
test22
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:11:40'!
test16MovingBackwardsEast
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.
! !

!methodRemoval: MarsRoverTest #testMovingBackwardsEast stamp: 'GR 5/17/2021 17:11:41'!
testMovingBackwardsEast
|rover orientation position|
	orientation := East new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: -1 inY: 0) equals: rover position.
!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:12:01'!
test17MovingBackwardsSouth
|rover orientation position|
	orientation := South new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: 1) equals: rover position.! !

!methodRemoval: MarsRoverTest #test23 stamp: 'GR 5/17/2021 17:12:02'!
test23
|rover orientation position|
	orientation := South new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 0 inY: 1) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:12:14'!
test18MovingBackwardsWest
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test24 stamp: 'GR 5/17/2021 17:12:15'!
test24
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'b'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'GR 5/17/2021 17:12:33'!
test19ShouldNotProcessAfterBadCommand
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'bkb'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.! !

!methodRemoval: MarsRoverTest #test25 stamp: 'GR 5/17/2021 17:12:34'!
test25
|rover orientation position|
	orientation := West new.
	position := Position inX: 0 inY: 0.
	rover := MarsRover in: position orientedTo: orientation.
	rover commandSequence: 'bkb'.
	
	self assert: (Position inX: 1 inY: 0) equals: rover position.!

----SNAPSHOT----(17 May 2021 17:15:58) CuisUniversity-4532.image priorSource: 17011005!